{
    "docs": [
        {
            "location": "/", 
            "text": "Turn-by-Turn overview\n\n\nMapzen Turn-by-Turn\n is an open-source routing service that lets you integrate routing and navigation into a web or mobile application. The service works globally, and provides dynamic and customizable routing by driving, walking, bicycling, and using multimodal and transit options, with clear directions for maneuvers along the route.\n\n\nTo use the service, you first need to obtain an API key from Mapzen. Sign in at https://mapzen.com/developers to create and manage your API keys. There are limitations on requests, maximum distances, and numbers of locations to prevent individual users from degrading the overall system performance.\n\n\nRoute requests and results\n\n\nWhen you \nrequest a route\n, you are sending and receiving \nJSON\n, which is a human-readable text format. In the JSON array, you need to specify the \nlocations\n to visit on the route, the \ncosting model\n that represents the mode of travel, such as car or bicycle, and your API key. The location coordinates, given in decimal degrees, can come from many input sources, such as a GPS location, a point or a click on a map, a geocoding service such as \nMapzen Search\n, and so on. Costing methods can have several options that can be adjusted to develop the the route path and estimate the time along the path.\n\n\nThe service \nroute results\n provide details about the trip, including locations, a summary with basic information about the entire trip, and a list of legs. Each leg has its own summary, a shape, which is an encoded polyline of the route path, and a list of maneuvers. These maneuvers provide written narrative instructions, plus verbal alerts that can be used as audio guidance in navigation apps.\n\n\nThe JSON returned from the route query can be drawn on a map and shown as instructions for maneuvers along the route. Through a \nplug-in\n to the Leaflet JavaScript library, you can \ndisplay Mapzen Turn-by-Turn routes\n on web and mobile maps.\n\n\nData sources in Turn-by-Turn\n\n\nMapzen Turn-by-Turn draws data from OpenStreetMap and from \nTransitland\n, the open transit data aggregation project that Mapzen sponsors. Apps can also query the Transitland API to build maps and analyses that enrich that journey and provide context around Points A and B, as well as the many multimodal transportation options that connect them. Journeys planned by Mapzen Turn-by-Turn and data in Transitland all include Onestop IDs, an open identifier scheme that catalogs transit operators, stops, and routes from around the world.\n\n\nMapzen Turn-by-Turn is powered by the Valhalla routing engine, and is available for both commercial and non-commercial purposes. The \nsource code\n is open to view and modify, and contributions are welcomed.", 
            "title": "Overview"
        }, 
        {
            "location": "/#turn-by-turn-overview", 
            "text": "Mapzen Turn-by-Turn  is an open-source routing service that lets you integrate routing and navigation into a web or mobile application. The service works globally, and provides dynamic and customizable routing by driving, walking, bicycling, and using multimodal and transit options, with clear directions for maneuvers along the route.  To use the service, you first need to obtain an API key from Mapzen. Sign in at https://mapzen.com/developers to create and manage your API keys. There are limitations on requests, maximum distances, and numbers of locations to prevent individual users from degrading the overall system performance.", 
            "title": "Turn-by-Turn overview"
        }, 
        {
            "location": "/#route-requests-and-results", 
            "text": "When you  request a route , you are sending and receiving  JSON , which is a human-readable text format. In the JSON array, you need to specify the  locations  to visit on the route, the  costing model  that represents the mode of travel, such as car or bicycle, and your API key. The location coordinates, given in decimal degrees, can come from many input sources, such as a GPS location, a point or a click on a map, a geocoding service such as  Mapzen Search , and so on. Costing methods can have several options that can be adjusted to develop the the route path and estimate the time along the path.  The service  route results  provide details about the trip, including locations, a summary with basic information about the entire trip, and a list of legs. Each leg has its own summary, a shape, which is an encoded polyline of the route path, and a list of maneuvers. These maneuvers provide written narrative instructions, plus verbal alerts that can be used as audio guidance in navigation apps.  The JSON returned from the route query can be drawn on a map and shown as instructions for maneuvers along the route. Through a  plug-in  to the Leaflet JavaScript library, you can  display Mapzen Turn-by-Turn routes  on web and mobile maps.", 
            "title": "Route requests and results"
        }, 
        {
            "location": "/#data-sources-in-turn-by-turn", 
            "text": "Mapzen Turn-by-Turn draws data from OpenStreetMap and from  Transitland , the open transit data aggregation project that Mapzen sponsors. Apps can also query the Transitland API to build maps and analyses that enrich that journey and provide context around Points A and B, as well as the many multimodal transportation options that connect them. Journeys planned by Mapzen Turn-by-Turn and data in Transitland all include Onestop IDs, an open identifier scheme that catalogs transit operators, stops, and routes from around the world.  Mapzen Turn-by-Turn is powered by the Valhalla routing engine, and is available for both commercial and non-commercial purposes. The  source code  is open to view and modify, and contributions are welcomed.", 
            "title": "Data sources in Turn-by-Turn"
        }, 
        {
            "location": "/api-reference/", 
            "text": "Mapzen Turn-by-Turn routing service API reference\n\n\nMapzen Turn-by-Turn, powered by the Valhalla engine, is an open-source routing service that lets you integrate routing and navigation into a web or mobile application. This page documents the inputs and outputs to the service.\n\n\nThe routing service is in active development. You can follow the \nMapzen blog\n to get updates. To report software issues or suggest enhancements, open an issue in GitHub (use the \nThor repository\n for comments about route paths or \nOdin repository\n for narration). You can also send a message to routing@mapzen.com.\n\n\nThe default logic for the OpenStreetMap tags, keys, and values used when routing are documented on an \nOSM wiki page\n.\n\n\nAPI keys and service limits\n\n\nTo use the Mapzen Turn-by-Turn routing service, you must first obtain an developer API key from Mapzen. Sign in at https://mapzen.com/developers to create and manage your API keys.\n\n\nMapzen Turn-by-Turn is a shared routing service. As such, there are limitations on requests, maximum distances, and numbers of locations to prevent individual users from degrading the overall system performance.\n\n\nThe following limitations are currently in place:\n\n\n\n\nPedestrian routes have a limit of 50 locations and 250 kilometers.\n\n\nBicycle routes have a limit of 50 locations and 500 kilometers.\n\n\nAutomobile routes have a limit of 20 locations and 5,000 kilometers.\n\n\nMultimodal routes have a limit of 50 locations and 500 kilometers.\n\n\n\n\nThe distance limit is the total \"as the crow-flies\" distance along a path through successive locations.\n\n\nLimits may be increased in the future, but you can contact routing@mapzen.com if you encounter rate limit status messages and need higher limits in the meantime.\n\n\nInputs of a route\n\n\nThe route request takes the form of \nvalhalla.mapzen.com/route?json={}\napi_key=\n, where the JSON inputs inside the \n{}\n include location information, name and options for the costing model, and output options. Here is an example request:\n\n\nvalhalla.mapzen.com/route?json={\"locations\":[{\"lat\":42.358528,\"lon\":-83.271400,\"street\":\"Appleton\"},{\"lat\":42.996613,\"lon\":-78.749855,\"street\":\"Ranch Trail\"}],\"costing\":\"auto\",\"costing_options\":{\"auto\":{\"country_crossing_penalty\":2000.0}},\"directions_options\":{\"units\":\"miles\"},\"id\":\"my_work_route\"}\napi_key=mapzen-xxxxxx\n\n\nThis request provides automobile routing between the Detroit, Michigan area and Buffalo, New York, with an optional street name parameter to improve navigation at the start and end points. It attempts to avoid routing north through Canada by adding a penalty for crossing international borders. The resulting route is displayed in miles.\n\n\nThere is an option to name your route request.  You can do this by appending the following to your request \nid=\n.  The \nid\n is returned with the response so a user could match to the corresponding request.\n\n\nNote that you must append your own \nAPI key\n to the URL, following \napi_key=\n at the end.\n\n\nLocations\n\n\nYou specify locations as an ordered list of two or more locations within a JSON array. Locations are visited in the order specified.  See the \nAPI keys and service limits\n section above for the locations and distance limits.\n\n\nA location must include a latitude and longitude in decimal degrees. The coordinates can come from many input sources, such as a GPS location, a point or a click on a map, a geocoding service, and so on. Note that Mapzen Turn-by-Turn is a routing service only, so cannot search for names or addresses or perform geocoding or reverse geocoding. External search services, such as \nMapzen Search\n or \nNominatim\n, can be used to find places and geocode addresses, which must be converted to coordinates for input.  \n\n\nTo build a route, you need to specify two \nbreak\n locations. In addition, you can include \nthrough\n locations to influence the route path.\n\n\n\n\n\n\n\n\nLocation parameters\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlat\n\n\nLatitude of the location in degrees.\n\n\n\n\n\n\nlon\n\n\nLongitude of the location in degrees.\n\n\n\n\n\n\ntype\n\n\nType of location, either \nbreak\n or \nthrough\n. A \nbreak\n is a stop, so the first and last locations must be of type \nbreak\n. A \nthrough\n location is one that the route path travels through, and is useful to force a route to go through location. The path is not allowed to reverse direction at the through locations. If no type is provided, the type is assumed to be a \nbreak\n.\n\n\n\n\n\n\nheading\n\n\n(optional) Preferred direction of travel for the start from the location. This can be useful for mobile routing where a vehicle is traveling in a specific direction along a road, and the route should start in that direction. The \nheading\n is indicated in degrees from north in a clockwise direction, where north is 0\u00b0, east is 90\u00b0, south is 180\u00b0, and west is 270\u00b0.\n\n\n\n\n\n\nstreet\n\n\n(optional) Street name. The street name may be used to assist finding the correct routing location at the specified latitude, longitude. This is not currently implemented.\n\n\n\n\n\n\nway_id\n\n\n(optional) OpenStreetMap identification number for a polyline [way] (http://wiki.openstreetmap.org/wiki/Way). The way ID may be used to assist finding the correct routing location at the specified latitude, longitude. This is not currently implemented.\n\n\n\n\n\n\n\n\nOptionally, you can include the following location information without impacting the routing. This information is carried through the request and returned as a convenience.\n\n\n\n\nname\n = Location or business name. The name may be used in the route narration directions, such as \"You have arrived at \nbusiness name\n.\")\n\n\ncity\n = City name.\n\n\nstate\n = State name.\n\n\npostal_code\n = Postal code.\n\n\ncountry\n = Country name.\n\n\nphone\n = Telephone number.\n\n\nurl\n = URL for the place or location.\n\n\nside_of_street\n = (response only) The side of street of a \nbreak\n \nlocation\n that is determined based on the actual route when the \nlocation\n is offset from the street. The possible values are \nleft\n and \nright\n.\n\n\ndate_time\n = (response only) Expected date/time for the user to be at the location using the ISO 8601 format (YYYY-MM-DDThh:mm) in the local time zone of departure or arrival.  For example \"2015-12-29T08:00\".\n\n\n\n\nFuture development work includes adding location options and information related to time at each location. This will allow routes to specify a start time or an arrive by time at each location. There is also ongoing work to improve support for \nthrough\n locations.\n\n\nCosting models\n\n\nMapzen Turn-by-Turn uses dynamic, run-time costing to generate the route path. The route request must include the name of the costing model and can include optional parameters available for the chosen costing model.\n\n\n\n\n\n\n\n\nCosting model\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nauto\n\n\nStandard costing for driving routes by car, motorcycle, truck, and so on that obeys automobile driving rules, such as access and turn restrictions. \nAuto\n provides a short time path (though not guaranteed to be shortest time) and uses intersection costing to minimize turns and maneuvers or road name changes. Routes also tend to favor highways and higher classification roads, such as motorways and trunks.\n\n\n\n\n\n\nauto_shorter\n\n\nAlternate costing for driving that provides a short path (though not guaranteed to be shortest distance) that obeys driving rules for access and turn restrictions.\n\n\n\n\n\n\nbicycle\n\n\nStandard costing for travel by bicycle, with a slight preference for using \ncycleways\n or roads with bicycle lanes. Bicycle routes follow regular roads when needed, but avoid roads without bicycle access.\n\n\n\n\n\n\nbus\n\n\nStandard costing for bus routes. Bus costing inherits the auto costing behaviors, but checks for bus access on the roads.\n\n\n\n\n\n\nmultimodal\n\n\nCurrently supports pedestrian and transit. In the future, multimodal will support a combination of all of the above.  Here is an example multimodal request at the current date and time: \nhttp://valhalla.mapzen.com/route?json={\"locations\":[{\"lat\":40.730930,\"lon\":-73.991379,\"street\":\"Wanamaker Place\"},{\"lat\":40.749706,\"lon\":-73.991562,\"street\":\"Penn Plaza\"}],\"costing\":\"multimodal\",\"directions_options\":{\"units\":\"miles\"}}\napi_key=mapzen-xxxxxxx\n  Note that you must append your own \nMapzen API key\n to the URL, following \napi_key=\n at the end.\n\n\n\n\n\n\npedestrian\n\n\nStandard walking route that excludes roads without pedestrian access. In general, pedestrian routes are shortest distance with the following exceptions: walkways and footpaths are slightly favored, while steps or stairs and alleys are slightly avoided.\n\n\n\n\n\n\n\n\nCosting options\n\n\nCosting methods can have several options that can be adjusted to develop the route path, as well as for estimating time along the path. Specify costing model options in your request using the format of \ncosting_options.type\n, such as \ncosting_options.auto\n.\n\n\n\n\nCost options are fixed costs in seconds that are added to both the path cost and the estimated time. Examples of costs are \ngate_costs\n and \ntoll_booth_costs\n, where a fixed amount of time is added. Costs are not generally used to influence the route path; instead, use penalties to do this.\n\n\nPenalty options are fixed costs in seconds that are only added to the path cost. Penalties can influence the route path determination but do not add to the estimated time along the path. For example, add a \ntoll_booth_penalty\n to create route paths that tend to avoid toll booths.\n\n\nFactor options are used to multiply the cost along an edge or road section in a way that influences the path to favor or avoid a particular attribute. Factor options do not impact estimated time along the path, though. Factors must be in the range 0.25 to 100000.0, where factors of 1.0 have no influence on cost. Use a factor less than 1.0 to attempt to favor paths containing preferred attributes, and a value greater than 1.0 to avoid paths with undesirable attributes. Avoidance factors are more effective than favor factors at influencing a path. A factor's impact also depends on the length of road containing the specified attribute, as longer roads have more impact on the costing than very short roads. For this reason, penalty options tend to be better at influencing paths.\n\n\n\n\nAutomobile and bus costing options\n\n\nThese options are available for \nauto\n, \nauto_shorter\n, and \nbus\n costing methods.\n\n\n\n\n\n\n\n\nAutomobile options\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmaneuver_penalty\n\n\nA penalty applied when transitioning between roads that do not have consistent naming\u2013in other words, no road names in common. This penalty can be used to create simpler routes that tend to have fewer maneuvers or narrative guidance instructions. The default maneuver penalty is five seconds.\n\n\n\n\n\n\ngate_cost\n\n\nA cost applied when a \ngate\n is encountered. This cost is added to the estimated time / elapsed time. The default gate cost is 30 seconds.\n\n\n\n\n\n\ntoll_booth_cost\n\n\nA cost applied when a \ntoll booth\n is encountered. This cost is added to the estimated and elapsed times. The default cost is 15 seconds.\n\n\n\n\n\n\ntoll_booth_penalty\n\n\nA penalty applied to the cost when a \ntoll booth\n is encountered. This penalty can be used to create paths that avoid toll roads. The default toll booth penalty is 0.\n\n\n\n\n\n\nferry_cost\n\n\nA cost applied when entering a ferry. This cost is added to the estimated and elapsed times. The default cost is 300 seconds (5 minutes).\n\n\n\n\n\n\nuse_ferry\n\n\nThis value indicates the willingness to take ferries. This is range of values between 0 and 1. Values near 0 attempt to avoid ferries and values near 1 will favor ferries. The default value is 0.5. Note that sometimes ferries are required to complete a route so values of 0 are not guaranteed to avoid ferries entirely.\n\n\n\n\n\n\ncountry_crossing_cost\n\n\nA cost applied when encountering an international border. This cost is added to the estimated and elapsed times. The default cost is 600 seconds.\n\n\n\n\n\n\ncountry_crossing_penalty\n\n\nA penalty applied for a country crossing. This penalty can be used to create paths that avoid spanning country boundaries. The default penalty is 0.\n\n\n\n\n\n\n\n\nBicycle costing options\n\n\nThe default bicycle costing is tuned toward road bicycles with a slight preference for using \ncycleways\n or roads with bicycle lanes. Bicycle routes use regular roads where needed or where no direct bicycle lane options exist, but avoid roads without bicycle access. The costing model recognizes several factors unique to bicycle travel and offers several options for tuning bicycle routes. Several factors unique to travel by bicycle influence the resulting route.\n\n\n\n\nThe types of roads suitable for bicycling depend on the type of bicycle. Road bicycles (skinny or narrow tires) generally are suited to paved roads or perhaps very short sections of compacted gravel. They are not designed for riding on coarse gravel or most paths and tracks through wooded areas or farmland. Mountain bikes, on the other hand, are able to traverse a wider set of surfaces.\n\n\nAverage travel speed can be highly variable and can depend on bicycle type, fitness and experience of the cyclist, road surface, and hills. The costing model assumes a default speed on smooth, flat roads for each supported bicycle type. This speed can be overridden by an input option. The base speed is modulated by surface type (in conjunction with the bicycle type). Coming soon: logic to modify speed based on the hilliness of a road section.\n\n\nBicyclists vary in their tolerance for riding on roads. Most novice bicyclists, and even other bicyclists, prefer cycleways and dedicated cycling paths and would rather avoid all but the quietest neighborhood roads. Other cyclists may be experienced riding on roads and prefer to take roadways because they often provide the fastest way to get between two places. The bicycle costing model accounts for this with a \nuse_roads\n factor to indicate a cyclist's tolerance for riding on roads.\n\n\nBicyclists vary in their fitness level and experience level, and many want to avoid hilly roads, and especially roads with very steep uphill or even downhill sections. Even if the fastest path is over a mountain, many cyclists prefer a flatter path that avoids the climb and descent up and over the mountain.\n\n\n\n\nThe following options described above for autos also apply to bicycle costing methods: \nmaneuver_penalty\n, \ngate_cost\n, \ngate_penalty\n, \ncountry_crossing_cost\n, and \ncountry_costing_penalty\n.\n\n\nThese additional options are available for bicycle costing methods.\n\n\n\n\n\n\n\n\nBicycle options\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbicycle_type\n\n\nThe type of bicycle. \nRoad\n: a road-style bicycle with narrow tires that is generally lightweight and designed for speed on paved surfaces. \nHybrid\n or \nCity\n: a bicycle made mostly for city riding or casual riding on roads and paths with good surfaces.\nCross\n: a cyclo-cross bicycle, which is similar to a road bicycle but with wider tires suitable to rougher surfaces.\nMountain\n: a mountain bicycle suitable for most surfaces but generally heavier and slower on paved surfaces.\n\n\n\n\n\n\ncycling_speed\n\n\nCycling speed is the average travel speed along smooth, flat roads. This is meant to be the speed a rider can comfortably maintain over the desired distance of the route. It can be modified (in the costing method) by surface type in conjunction with bicycle type and (coming soon) by hilliness of the road section. When no speed is specifically provided, the default speed is determined by the bicycle type and are as follows: Road = 25 KPH (15.5 MPH), Cross = 20 KPH (13 MPH), Hybrid/City = 18 KPH (11.5 MPH), and Mountain = 16 KPH (10 MPH).\n\n\n\n\n\n\nuse_roads\n\n\nA cyclist's propensity to use roads alongside other vehicles. This is a range of values from 0 to 1, where 0 attempts to avoid roads and stay on cycleways and paths, and 1 indicates the rider is more comfortable riding on roads. Based on the \nuse_roads\n factor, roads with certain classifications and higher speeds are penalized in an attempt to avoid them when finding the best path.\n\n\n\n\n\n\nuse_hills\n\n\nA cyclist's desire to tackle hills in their routes. This is a range of values from 0 to 1, where 0 attempts to avoid hills and steep grades even if it means a longer (time and distance) path, while 1 indicates the rider does not fear hills and steeper grades. Based on the \nuse_hills\n factor, penalties are applied to roads based on elevation change and grade. These penalties help the path avoid hilly roads in favor of flatter roads or less steep grades where available. Note that it is not always possible to find alternate paths to avoid hills (for example when route locations are in mountainous areas).\n\n\n\n\n\n\n\n\nPedestrian costing options\n\n\nThese options are available for pedestrian costing methods.\n\n\n\n\n\n\n\n\nPedestrian options\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nwalking_speed\n\n\nWalking speed in kilometers per hour. Defaults to 5.1 km/hr (3.1 miles/hour).\n\n\n\n\n\n\nwalkway_factor\n\n\nA factor that modifies the cost when encountering roads or paths that do not allow vehicles and are set aside for pedestrian use. Pedestrian routes generally attempt to favor using these \nwalkways and sidewalks\n. The default walkway_factor is 0.9, indicating a slight preference.\n\n\n\n\n\n\nalley_factor\n\n\nA factor that modifies (multiplies) the cost when \nalleys\n are encountered. Pedestrian routes generally want to avoid alleys or narrow service roads between buildings. The default alley_factor is 2.0.\n\n\n\n\n\n\ndriveway_factor\n\n\nA factor that modifies (multiplies) the cost when encountering a \ndriveway\n, which is often a private, service road. Pedestrian routes generally want to avoid driveways (private). The default driveway factor is 5.0.\n\n\n\n\n\n\nstep_penalty\n\n\nA penalty in seconds added to each transition onto a path with \nsteps or stairs\n. Higher values apply larger cost penalties to avoid paths that contain flights of steps.\n\n\n\n\n\n\n\n\nTransit costing options\n\n\nThese options are available for transit costing when the multimodal costing model is used.\n\n\n\n\n\n\n\n\nTransit options\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nuse_bus\n\n\nUser's desire to use buses.  Range of values from 0 (try to avoid buses) to 1 (strong preference for riding buses).\n\n\n\n\n\n\nuse_rail\n\n\nUser's desire to use rail/subway/metro.  Range of values from 0 (try to avoid rail) to 1 (strong preference for riding rail).\n\n\n\n\n\n\nuse_transfers\n\n\nUser's desire to favor transfers.  Range of values from 0 (try to avoid transfers) to 1 (totally comfortable with transfers).\n\n\n\n\n\n\n\n\nFor example, this is a route favoring buses, but also this person walks at a slower speed (4.1km/h)  \nhttp://valhalla.mapzen.com/route?json={\"locations\":[{\"lat\":40.749706,\"lon\":-73.991562,\"type\":\"break\",\"street\":\"Penn Plaza\"},{\"lat\":40.73093,\"lon\":-73.991379,\"type\":\"break\",\"street\":\"Wanamaker Place\"}],\"costing\":\"multimodal\",\"costing_options\":{\"transit\":{\"use_bus\":\"1.0\",\"use_rail\":\"0.0\",\"use_transfers\":\"0.3\"},\"pedestrian\":{\"walking_speed\":\"4.1\"}}}\napi_key=mapzen-xxxxxxx\n\n\nNote that you must append your own \nMapzen API key\n to the URL, following \napi_key=\n at the end.\n\n\nDirections options\n\n\n\n\n\n\n\n\nOptions\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nunits\n\n\nDistance units for output. Allowable unit types are miles (or mi) and kilometers (or km). If no unit type is specified, the units default to kilometers.\n\n\n\n\n\n\nlanguage\n\n\nThe language of the narration instructions based on the \nIETF BCP 47\n language tag string. If no language is specified or the specified language is unsupported, United States-based English (en-US) is used. Currently supported language tags with alias in parentheses:  cs-CZ (cs), de-DE (de), en-US (en), en-US-x-pirate (pirate), es-ES (es), fr-FR (fr), it-IT (it).\n\n\n\n\n\n\nnarrative\n\n\nFlag to allow users to disable narrative production. Locations, shape, length, and time are still returned. The narrative production is enabled by default.\n\n\n\n\n\n\n\n\nOther request options\n\n\n\n\n\n\n\n\nOptions\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndate_time\n\n\nThis is the local date and time at the location.\ntype\n0 - Current departure time.\n1 - Specified departure time\n2 - Specified arrival time. Not yet implemented for multimodal costing method.\nvalue\n - the date and time is specified in ISO 8601 format (YYYY-MM-DDThh:mm) in the local time zone of departure or arrival.  For example \"2016-07-03T08:06\"\nNOTE: This option is not supported for our Matrix service.\n\n\n\n\n\n\nout_format\n\n\nOutput format. If no \nout_format\n is specified, JSON is returned. Future work includes PBF (protocol buffer) support.\n\n\n\n\n\n\nid\n\n\nName your route request. If \nid\n is specified, the naming will be sent thru to the response.\n\n\n\n\n\n\n\n\nThis is an example of a transit route departing on 2016-03-29 at 08:00.\n\nhttp://valhalla.mapzen.com/route?json={\"locations\":[{\"lat\":40.749706,\"lon\":-73.991562,\"type\":\"break\",\"street\":\"Penn Plaza\"},{\"lat\":40.73093,\"lon\":-73.991379,\"type\":\"break\",\"street\":\"Wanamaker Place\"}],\"costing\":\"multimodal\",\"date_time\":{\"type\":1,\"value\":\"2016-03-29T08:00\"}}\napi_key=mapzen-xxxxxxx\n\n\nNote that you must append your own \nMapzen API key\n to the URL, following \napi_key=\n at the end.\n\n\nOutputs of a route\n\n\nIf a route has been named in the request using the optional \nid=\n input, then the name will be returned as a string \nid\n on the JSON object.\n\n\nThe route results are returned as a \ntrip\n. This is a JSON object that contains details about the trip, including locations, a summary with basic information about the entire trip, and a list of \nlegs\n.\n\n\nBasic trip information includes:\n\n\n\n\n\n\n\n\nTrip Item\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstatus\n\n\nStatus code.\n\n\n\n\n\n\nstatus_message\n\n\nStatus message.\n\n\n\n\n\n\nunits\n\n\nThe specified units of length are returned, either kilometers or miles.\n\n\n\n\n\n\nlanguage\n\n\nThe language of the narration instructions. If the user specified a language in the directions options and the specified language was supported - this returned value will be equal to the specified value. Otherwise, this value will be the default (en-US) language.\n\n\n\n\n\n\nlocations\n\n\nLocation information is returned in the same form as it is entered with additional fields to indicate the side of the street.\n\n\n\n\n\n\n\n\nThe summary JSON object includes:\n\n\n\n\n\n\n\n\nSummary Item\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntime\n\n\nEstimated elapsed time to complete the trip.\n\n\n\n\n\n\nlength\n\n\nDistance traveled for the entire trip. Units are either miles or kilometers based on the input units specified.\n\n\n\n\n\n\nmin_lat\n\n\nMinimum latitude of a bounding box containing the route.\n\n\n\n\n\n\nmin_lon\n\n\nMinimum longitude of a bounding box containing the route.\n\n\n\n\n\n\nmax_lat\n\n\nMaximum latitude of a bounding box containing the route.\n\n\n\n\n\n\nmax_lon\n\n\nMaximum longitude of a bounding box containing the route.\n\n\n\n\n\n\n\n\nTrip legs and maneuvers\n\n\nA \ntrip\n contains one or more \nlegs\n. For \nn\n number of \nbreak\n locations, there are \nn-1\n legs. \nThrough\n locations do not create separate legs.\n\n\nEach leg of the trip includes a summary, which is comprised of the same information as a trip summary but applied to the single leg of the trip. It also includes a \nshape\n, which is an \nencoded polyline\n of the route path, and a list of \nmaneuvers\n as a JSON array. For more about decoding route shapes, see these \ncode examples\n.\n\n\nEach maneuver includes:\n\n\n\n\n\n\n\n\nManeuver Item\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntype\n\n\nType of maneuver. See below for a list.\n\n\n\n\n\n\ninstruction\n\n\nWritten maneuver instruction. Describes the maneuver, such as \"Turn right onto Main Street\".\n\n\n\n\n\n\nverbal_transition_alert_instruction\n\n\nText suitable for use as a verbal alert in a navigation application. The transition alert instruction will prepare the user for the forthcoming transition. For example: \"Turn right onto North Prince Street\".\n\n\n\n\n\n\nverbal_pre_transition_instruction\n\n\nText suitable for use as a verbal message immediately prior to the maneuver transition. For example \"Turn right onto North Prince Street, U.S. 2 22\".\n\n\n\n\n\n\nverbal_post_transition_instruction\n\n\nText suitable for use as a verbal message immediately after the maneuver transition. For example \"Continue on U.S. 2 22 for 3.9 miles\".\n\n\n\n\n\n\nstreet_names\n\n\nList of street names that are consistent along the entire maneuver.\n\n\n\n\n\n\nbegin_street_names\n\n\nWhen present, these are the street names at the beginning of the maneuver (if they are different than the names that are consistent along the entire maneuver).\n\n\n\n\n\n\ntime\n\n\nEstimated time along the maneuver in seconds.\n\n\n\n\n\n\nlength\n\n\nManeuver length in the units specified.\n\n\n\n\n\n\nbegin_shape_index\n\n\nIndex into the list of shape points for the start of the maneuver.\n\n\n\n\n\n\nend_shape_index\n\n\nIndex into the list of shape points for the end of the maneuver.\n\n\n\n\n\n\ntoll\n\n\nTrue if the maneuver has any toll, or portions of the maneuver are subject to a toll.\n\n\n\n\n\n\nrough\n\n\nTrue if the maneuver is unpaved or rough pavement, or has any portions that have rough pavement.\n\n\n\n\n\n\ngate\n\n\nTrue if a gate is encountered on this maneuver.\n\n\n\n\n\n\nferry\n\n\nTrue if a ferry is encountered on this maneuver.\n\n\n\n\n\n\nsign\n\n\nContains the interchange guide information at a road junction associated with this maneuver. See below for details.\n\n\n\n\n\n\nroundabout_exit_count\n\n\nThe spoke to exit roundabout after entering.\n\n\n\n\n\n\ndepart_instruction\n\n\nWritten depart time instruction. Typically used with a transit maneuver, such as \"Depart: 8:04 AM from 8 St - NYU\".\n\n\n\n\n\n\nverbal_depart_instruction\n\n\nText suitable for use as a verbal depart time instruction. Typically used with a transit maneuver, such as \"Depart at 8:04 AM from 8 St - NYU\".\n\n\n\n\n\n\narrive_instruction\n\n\nWritten arrive time instruction. Typically used with a transit maneuver, such as \"Arrive: 8:10 AM at 34 St - Herald Sq\".\n\n\n\n\n\n\nverbal_arrive_instruction\n\n\nText suitable for use as a verbal arrive time instruction. Typically used with a transit maneuver, such as \"Arrive at 8:10 AM at 34 St - Herald Sq\".\n\n\n\n\n\n\ntransit_info\n\n\nContains the attributes that descibe a specific transit route. See below for details.\n\n\n\n\n\n\nverbal_multi_cue\n\n\nTrue if the \nverbal_pre_transition_instruction\n has been appended with the verbal instruction of the next maneuver.\n\n\n\n\n\n\ntravel_mode\n\n\nTravel mode.\n\"drive\"\n\"pedestrian\"\n\"bicycle\"\n\"transit\"\n\n\n\n\n\n\ntravel_type\n\n\nTravel type for drive.\n\"car\"\nTravel type for pedestrian.\n\"foot\"\nTravel type for bicycle.\n\"road\"\nTravel type for transit.\nTram or light rail = \"tram\"\nMetro or subway = \"metro\"\nRail = \"rail\"\nBus = \"bus\"\nFerry = \"ferry\"\nCable car = \"cable_car\"\nGondola = \"gondola\"\nFunicular = \"funicular\"\n\n\n\n\n\n\n\n\nFor the maneuver \ntype\n, the following are available:\n\n\nkNone = 0;\nkStart = 1;\nkStartRight = 2;\nkStartLeft = 3;\nkDestination = 4;\nkDestinationRight = 5;\nkDestinationLeft = 6;\nkBecomes = 7;\nkContinue = 8;\nkSlightRight = 9;\nkRight = 10;\nkSharpRight = 11;\nkUturnRight = 12;\nkUturnLeft = 13;\nkSharpLeft = 14;\nkLeft = 15;\nkSlightLeft = 16;\nkRampStraight = 17;\nkRampRight = 18;\nkRampLeft = 19;\nkExitRight = 20;\nkExitLeft = 21;\nkStayStraight = 22;\nkStayRight = 23;\nkStayLeft = 24;\nkMerge = 25;\nkRoundaboutEnter = 26;\nkRoundaboutExit = 27;\nkFerryEnter = 28;\nkFerryExit = 29;\nkTransit = 30;\nkTransitTransfer = 31;\nkTransitRemainOn = 32;\nkTransitConnectionStart = 33;\nkTransitConnectionTransfer = 34;\nkTransitConnectionDestination = 35;\nkPostTransitConnectionDestination = 36;\n\n\n\n\nThe maneuver \nsign\n may contain four lists of interchange sign elements as follows:\n\n\n\n\nexit_number_elements\n = list of exit number elements. If an exit number element exists, it is typically just one value.\n\n\nexit_branch_elements\n = list of exit branch elements. The exit branch element text is the subsequent road name or route number after the sign.\n\n\nexit_toward_elements\n = list of exit toward elements. The exit toward element text is the location where the road ahead goes - the location is typically a control city, but may also be a future road name or route number.\n\n\nexit_name_elements\n = list of exit name elements. The exit name element is the interchange identifier - typically not used in the US.\n\n\n\n\nEach maneuver sign element includes:\n\n\n\n\n\n\n\n\nManeuver Sign Element Item\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntext\n\n\nInterchange sign text. \nexit number example: 91B.\nexit branch example: I 95 North.\nexit toward example: New York.\nexit name example: Gettysburg Pike.\n\n\n\n\n\n\nconsecutive_count\n\n\nThe frequency of this sign element within a set a consecutive signs. This item is optional.\n\n\n\n\n\n\n\n\nA maneuver \ntransit_info\n includes:\n\n\n\n\n\n\n\n\nManeuver Transit Route Item\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nonestop_id\n\n\nGlobal transit route identifier from Transitland.\n\n\n\n\n\n\nshort_name\n\n\nShort name describing the transit route. For example \"N\".\n\n\n\n\n\n\nlong_name\n\n\nLong name describing the transit route. For example \"Broadway Express\".\n\n\n\n\n\n\nheadsign\n\n\nThe sign on a public transport vehicle that identifies the route destination to passengers. For example \"ASTORIA - DITMARS BLVD\".\n\n\n\n\n\n\ncolor\n\n\nThe numeric color value associated with a transit route. The value for yellow would be \"16567306\".\n\n\n\n\n\n\ntext_color\n\n\nThe numeric text color value associated with a transit route. The value for black would be \"0\".\n\n\n\n\n\n\ndescription\n\n\nThe description of the the transit route. For example \"Trains operate from Ditmars Boulevard, Queens, to Stillwell Avenue, Brooklyn, at all times. N trains in Manhattan operate along Broadway and across the Manhattan Bridge to and from Brooklyn. Trains in Brooklyn operate along 4th Avenue, then through Borough Park to Gravesend. Trains typically operate local in Queens, and either express or local in Manhattan and Brooklyn, depending on the time. Late night trains operate via Whitehall Street, Manhattan. Late night service is local\".\n\n\n\n\n\n\noperator_onestop_id\n\n\nGlobal operator/agency identifier from Transitland.\n\n\n\n\n\n\noperator_name\n\n\nOperator/agency name. For example \"BART\", \"King County Marine Divison\", etc.  Short name is used over long name.\n\n\n\n\n\n\noperator_url\n\n\nOperator/agency URL. For example \"http://web.mta.info/\".\n\n\n\n\n\n\ntransit_stops\n\n\nA list of the stops/stations associated with a specific transit route. See below for details.\n\n\n\n\n\n\n\n\nA \ntransit_stop\n includes:\n\n\n\n\n\n\n\n\nTransit Stop Item\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntype\n\n\nThe type of stop (simple stop=0; station=1)\n\n\n\n\n\n\nonestop_id\n\n\nGlobal transit stop identifier from Transitland.\n\n\n\n\n\n\nname\n\n\nName of the stop/station. For example \"14 St - Union Sq\".\n\n\n\n\n\n\narrival_date_time\n\n\nArrival date/time using the ISO 8601 format (YYYY-MM-DDThh:mm). For example \"2015-12-29T08:06\".\n\n\n\n\n\n\ndeparture_date_time\n\n\nDeparture date/time using the ISO 8601 format (YYYY-MM-DDThh:mm). For example \"2015-12-29T08:06\".\n\n\n\n\n\n\nis_parent_stop\n\n\nTrue if this stop is a marked as a parent stop.\n\n\n\n\n\n\nassumed_schedule\n\n\nTrue if the times are based on an assumed schedule because the actual schedule is not known.\n\n\n\n\n\n\nlat\n\n\nLatitude of the transit stop in degrees.\n\n\n\n\n\n\nlon\n\n\nLongitude of the transit stop in degrees.\n\n\n\n\n\n\n\n\nContinuing with the earlier routing example from the Detroit, Michigan area, a maneuver such as this one may be returned with that request: \n{\"begin_shape_index\":0,\"length\":0.109,\"end_shape_index\":1,\"instruction\":\"Go south on Appleton.\",\"street_names\":[\"Appleton\"],\"type\":1,\"time\":0}\n\n\nIn the future, look for additional maneuver information to enhance navigation applications, including landmark usage.\n\n\nReturn codes and conditions\n\n\nThe following is a table of error conditions that may occur for a particular request. In general, the service follows the \nHTTP specification\n. That is to say that \n5xx\n returns are generally ephemeral server problems that should be resolved shortly or are the result of a bug. \n4xx\n returns are used to mark requests that cannot be carried out, generally due to bad input in the request or problems with the underlying data. A \n2xx\n return is expected when there is a successful route result or \ntrip\n, as described above.\n\n\n\n\n\n\n\n\nCode\n\n\nBody\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n200\n\n\nyour_trip_json\n\n\nA happy bit of json describing your \ntrip\n result\n\n\n\n\n\n\n400\n\n\nFailed to parse json request\n\n\nYou need a valid json request\n\n\n\n\n\n\n400\n\n\nFailed to parse location\n\n\nYou need a valid location object in your json request\n\n\n\n\n\n\n400\n\n\nFailed to parse correlated location\n\n\nThere was a problem with the location once correlated to the route network\n\n\n\n\n\n\n400\n\n\nInsufficiently specified required parameter 'locations'\n\n\nYou forgot the locations parameter\n\n\n\n\n\n\n400\n\n\nNo edge/node costing provided\n\n\nYou forgot the costing parameter\n\n\n\n\n\n\n400\n\n\nInsufficient number of locations provided\n\n\nYou didn't provide enough locations\n\n\n\n\n\n\n400\n\n\nExceeded max route locations of X\n\n\nYou are asking for too many locations\n\n\n\n\n\n\n400\n\n\nLocations are in unconnected regions. Go check/edit the map at osm.org\n\n\nYou are routing between regions of no connectivity\n\n\n\n\n\n\n400\n\n\nNo costing method found for 'X'\n\n\nYou are asking for a non-existent costing mode\n\n\n\n\n\n\n400\n\n\nPath distance exceeds the max distance limit\n\n\nYou want to travel further than this mode allows\n\n\n\n\n\n\n400\n\n\nNo suitable edges near location\n\n\nThere were no edges applicable to your mode of travel near the input location\n\n\n\n\n\n\n400\n\n\nNo data found for location\n\n\nThere was no route data tile at the input location\n\n\n\n\n\n\n400\n\n\nNo path could be found for input\n\n\nThere was no path found between the input locations\n\n\n\n\n\n\n404\n\n\nTry any of: '/route' '/locate'\n\n\nYou asked for an invalid path\n\n\n\n\n\n\n405\n\n\nTry a POST or GET request instead\n\n\nWe only support GET and POST requests\n\n\n\n\n\n\n500\n\n\nFailed to parse intermediate request format\n\n\nHad a problem reading an intermediate request format\n\n\n\n\n\n\n500\n\n\nFailed to parse TripPath\n\n\nHad a problem reading the computed path from Protobuf\n\n\n\n\n\n\n500\n\n\nCould not build directions for TripPath\n\n\nHad a problem using the trip path to create TripDirections\n\n\n\n\n\n\n500\n\n\nFailed to parse TripDirections\n\n\nHad a problem using the trip directions to serialize a json response\n\n\n\n\n\n\n501\n\n\nNot implemented\n\n\nNot Implemented", 
            "title": "API reference"
        }, 
        {
            "location": "/api-reference/#mapzen-turn-by-turn-routing-service-api-reference", 
            "text": "Mapzen Turn-by-Turn, powered by the Valhalla engine, is an open-source routing service that lets you integrate routing and navigation into a web or mobile application. This page documents the inputs and outputs to the service.  The routing service is in active development. You can follow the  Mapzen blog  to get updates. To report software issues or suggest enhancements, open an issue in GitHub (use the  Thor repository  for comments about route paths or  Odin repository  for narration). You can also send a message to routing@mapzen.com.  The default logic for the OpenStreetMap tags, keys, and values used when routing are documented on an  OSM wiki page .", 
            "title": "Mapzen Turn-by-Turn routing service API reference"
        }, 
        {
            "location": "/api-reference/#api-keys-and-service-limits", 
            "text": "To use the Mapzen Turn-by-Turn routing service, you must first obtain an developer API key from Mapzen. Sign in at https://mapzen.com/developers to create and manage your API keys.  Mapzen Turn-by-Turn is a shared routing service. As such, there are limitations on requests, maximum distances, and numbers of locations to prevent individual users from degrading the overall system performance.  The following limitations are currently in place:   Pedestrian routes have a limit of 50 locations and 250 kilometers.  Bicycle routes have a limit of 50 locations and 500 kilometers.  Automobile routes have a limit of 20 locations and 5,000 kilometers.  Multimodal routes have a limit of 50 locations and 500 kilometers.   The distance limit is the total \"as the crow-flies\" distance along a path through successive locations.  Limits may be increased in the future, but you can contact routing@mapzen.com if you encounter rate limit status messages and need higher limits in the meantime.", 
            "title": "API keys and service limits"
        }, 
        {
            "location": "/api-reference/#inputs-of-a-route", 
            "text": "The route request takes the form of  valhalla.mapzen.com/route?json={} api_key= , where the JSON inputs inside the  {}  include location information, name and options for the costing model, and output options. Here is an example request:  valhalla.mapzen.com/route?json={\"locations\":[{\"lat\":42.358528,\"lon\":-83.271400,\"street\":\"Appleton\"},{\"lat\":42.996613,\"lon\":-78.749855,\"street\":\"Ranch Trail\"}],\"costing\":\"auto\",\"costing_options\":{\"auto\":{\"country_crossing_penalty\":2000.0}},\"directions_options\":{\"units\":\"miles\"},\"id\":\"my_work_route\"} api_key=mapzen-xxxxxx  This request provides automobile routing between the Detroit, Michigan area and Buffalo, New York, with an optional street name parameter to improve navigation at the start and end points. It attempts to avoid routing north through Canada by adding a penalty for crossing international borders. The resulting route is displayed in miles.  There is an option to name your route request.  You can do this by appending the following to your request  id= .  The  id  is returned with the response so a user could match to the corresponding request.  Note that you must append your own  API key  to the URL, following  api_key=  at the end.", 
            "title": "Inputs of a route"
        }, 
        {
            "location": "/api-reference/#locations", 
            "text": "You specify locations as an ordered list of two or more locations within a JSON array. Locations are visited in the order specified.  See the  API keys and service limits  section above for the locations and distance limits.  A location must include a latitude and longitude in decimal degrees. The coordinates can come from many input sources, such as a GPS location, a point or a click on a map, a geocoding service, and so on. Note that Mapzen Turn-by-Turn is a routing service only, so cannot search for names or addresses or perform geocoding or reverse geocoding. External search services, such as  Mapzen Search  or  Nominatim , can be used to find places and geocode addresses, which must be converted to coordinates for input.    To build a route, you need to specify two  break  locations. In addition, you can include  through  locations to influence the route path.     Location parameters  Description      lat  Latitude of the location in degrees.    lon  Longitude of the location in degrees.    type  Type of location, either  break  or  through . A  break  is a stop, so the first and last locations must be of type  break . A  through  location is one that the route path travels through, and is useful to force a route to go through location. The path is not allowed to reverse direction at the through locations. If no type is provided, the type is assumed to be a  break .    heading  (optional) Preferred direction of travel for the start from the location. This can be useful for mobile routing where a vehicle is traveling in a specific direction along a road, and the route should start in that direction. The  heading  is indicated in degrees from north in a clockwise direction, where north is 0\u00b0, east is 90\u00b0, south is 180\u00b0, and west is 270\u00b0.    street  (optional) Street name. The street name may be used to assist finding the correct routing location at the specified latitude, longitude. This is not currently implemented.    way_id  (optional) OpenStreetMap identification number for a polyline [way] (http://wiki.openstreetmap.org/wiki/Way). The way ID may be used to assist finding the correct routing location at the specified latitude, longitude. This is not currently implemented.     Optionally, you can include the following location information without impacting the routing. This information is carried through the request and returned as a convenience.   name  = Location or business name. The name may be used in the route narration directions, such as \"You have arrived at  business name .\")  city  = City name.  state  = State name.  postal_code  = Postal code.  country  = Country name.  phone  = Telephone number.  url  = URL for the place or location.  side_of_street  = (response only) The side of street of a  break   location  that is determined based on the actual route when the  location  is offset from the street. The possible values are  left  and  right .  date_time  = (response only) Expected date/time for the user to be at the location using the ISO 8601 format (YYYY-MM-DDThh:mm) in the local time zone of departure or arrival.  For example \"2015-12-29T08:00\".   Future development work includes adding location options and information related to time at each location. This will allow routes to specify a start time or an arrive by time at each location. There is also ongoing work to improve support for  through  locations.", 
            "title": "Locations"
        }, 
        {
            "location": "/api-reference/#costing-models", 
            "text": "Mapzen Turn-by-Turn uses dynamic, run-time costing to generate the route path. The route request must include the name of the costing model and can include optional parameters available for the chosen costing model.     Costing model  Description      auto  Standard costing for driving routes by car, motorcycle, truck, and so on that obeys automobile driving rules, such as access and turn restrictions.  Auto  provides a short time path (though not guaranteed to be shortest time) and uses intersection costing to minimize turns and maneuvers or road name changes. Routes also tend to favor highways and higher classification roads, such as motorways and trunks.    auto_shorter  Alternate costing for driving that provides a short path (though not guaranteed to be shortest distance) that obeys driving rules for access and turn restrictions.    bicycle  Standard costing for travel by bicycle, with a slight preference for using  cycleways  or roads with bicycle lanes. Bicycle routes follow regular roads when needed, but avoid roads without bicycle access.    bus  Standard costing for bus routes. Bus costing inherits the auto costing behaviors, but checks for bus access on the roads.    multimodal  Currently supports pedestrian and transit. In the future, multimodal will support a combination of all of the above.  Here is an example multimodal request at the current date and time:  http://valhalla.mapzen.com/route?json={\"locations\":[{\"lat\":40.730930,\"lon\":-73.991379,\"street\":\"Wanamaker Place\"},{\"lat\":40.749706,\"lon\":-73.991562,\"street\":\"Penn Plaza\"}],\"costing\":\"multimodal\",\"directions_options\":{\"units\":\"miles\"}} api_key=mapzen-xxxxxxx   Note that you must append your own  Mapzen API key  to the URL, following  api_key=  at the end.    pedestrian  Standard walking route that excludes roads without pedestrian access. In general, pedestrian routes are shortest distance with the following exceptions: walkways and footpaths are slightly favored, while steps or stairs and alleys are slightly avoided.", 
            "title": "Costing models"
        }, 
        {
            "location": "/api-reference/#costing-options", 
            "text": "Costing methods can have several options that can be adjusted to develop the route path, as well as for estimating time along the path. Specify costing model options in your request using the format of  costing_options.type , such as  costing_options.auto .   Cost options are fixed costs in seconds that are added to both the path cost and the estimated time. Examples of costs are  gate_costs  and  toll_booth_costs , where a fixed amount of time is added. Costs are not generally used to influence the route path; instead, use penalties to do this.  Penalty options are fixed costs in seconds that are only added to the path cost. Penalties can influence the route path determination but do not add to the estimated time along the path. For example, add a  toll_booth_penalty  to create route paths that tend to avoid toll booths.  Factor options are used to multiply the cost along an edge or road section in a way that influences the path to favor or avoid a particular attribute. Factor options do not impact estimated time along the path, though. Factors must be in the range 0.25 to 100000.0, where factors of 1.0 have no influence on cost. Use a factor less than 1.0 to attempt to favor paths containing preferred attributes, and a value greater than 1.0 to avoid paths with undesirable attributes. Avoidance factors are more effective than favor factors at influencing a path. A factor's impact also depends on the length of road containing the specified attribute, as longer roads have more impact on the costing than very short roads. For this reason, penalty options tend to be better at influencing paths.", 
            "title": "Costing options"
        }, 
        {
            "location": "/api-reference/#automobile-and-bus-costing-options", 
            "text": "These options are available for  auto ,  auto_shorter , and  bus  costing methods.     Automobile options  Description      maneuver_penalty  A penalty applied when transitioning between roads that do not have consistent naming\u2013in other words, no road names in common. This penalty can be used to create simpler routes that tend to have fewer maneuvers or narrative guidance instructions. The default maneuver penalty is five seconds.    gate_cost  A cost applied when a  gate  is encountered. This cost is added to the estimated time / elapsed time. The default gate cost is 30 seconds.    toll_booth_cost  A cost applied when a  toll booth  is encountered. This cost is added to the estimated and elapsed times. The default cost is 15 seconds.    toll_booth_penalty  A penalty applied to the cost when a  toll booth  is encountered. This penalty can be used to create paths that avoid toll roads. The default toll booth penalty is 0.    ferry_cost  A cost applied when entering a ferry. This cost is added to the estimated and elapsed times. The default cost is 300 seconds (5 minutes).    use_ferry  This value indicates the willingness to take ferries. This is range of values between 0 and 1. Values near 0 attempt to avoid ferries and values near 1 will favor ferries. The default value is 0.5. Note that sometimes ferries are required to complete a route so values of 0 are not guaranteed to avoid ferries entirely.    country_crossing_cost  A cost applied when encountering an international border. This cost is added to the estimated and elapsed times. The default cost is 600 seconds.    country_crossing_penalty  A penalty applied for a country crossing. This penalty can be used to create paths that avoid spanning country boundaries. The default penalty is 0.", 
            "title": "Automobile and bus costing options"
        }, 
        {
            "location": "/api-reference/#bicycle-costing-options", 
            "text": "The default bicycle costing is tuned toward road bicycles with a slight preference for using  cycleways  or roads with bicycle lanes. Bicycle routes use regular roads where needed or where no direct bicycle lane options exist, but avoid roads without bicycle access. The costing model recognizes several factors unique to bicycle travel and offers several options for tuning bicycle routes. Several factors unique to travel by bicycle influence the resulting route.   The types of roads suitable for bicycling depend on the type of bicycle. Road bicycles (skinny or narrow tires) generally are suited to paved roads or perhaps very short sections of compacted gravel. They are not designed for riding on coarse gravel or most paths and tracks through wooded areas or farmland. Mountain bikes, on the other hand, are able to traverse a wider set of surfaces.  Average travel speed can be highly variable and can depend on bicycle type, fitness and experience of the cyclist, road surface, and hills. The costing model assumes a default speed on smooth, flat roads for each supported bicycle type. This speed can be overridden by an input option. The base speed is modulated by surface type (in conjunction with the bicycle type). Coming soon: logic to modify speed based on the hilliness of a road section.  Bicyclists vary in their tolerance for riding on roads. Most novice bicyclists, and even other bicyclists, prefer cycleways and dedicated cycling paths and would rather avoid all but the quietest neighborhood roads. Other cyclists may be experienced riding on roads and prefer to take roadways because they often provide the fastest way to get between two places. The bicycle costing model accounts for this with a  use_roads  factor to indicate a cyclist's tolerance for riding on roads.  Bicyclists vary in their fitness level and experience level, and many want to avoid hilly roads, and especially roads with very steep uphill or even downhill sections. Even if the fastest path is over a mountain, many cyclists prefer a flatter path that avoids the climb and descent up and over the mountain.   The following options described above for autos also apply to bicycle costing methods:  maneuver_penalty ,  gate_cost ,  gate_penalty ,  country_crossing_cost , and  country_costing_penalty .  These additional options are available for bicycle costing methods.     Bicycle options  Description      bicycle_type  The type of bicycle.  Road : a road-style bicycle with narrow tires that is generally lightweight and designed for speed on paved surfaces.  Hybrid  or  City : a bicycle made mostly for city riding or casual riding on roads and paths with good surfaces. Cross : a cyclo-cross bicycle, which is similar to a road bicycle but with wider tires suitable to rougher surfaces. Mountain : a mountain bicycle suitable for most surfaces but generally heavier and slower on paved surfaces.    cycling_speed  Cycling speed is the average travel speed along smooth, flat roads. This is meant to be the speed a rider can comfortably maintain over the desired distance of the route. It can be modified (in the costing method) by surface type in conjunction with bicycle type and (coming soon) by hilliness of the road section. When no speed is specifically provided, the default speed is determined by the bicycle type and are as follows: Road = 25 KPH (15.5 MPH), Cross = 20 KPH (13 MPH), Hybrid/City = 18 KPH (11.5 MPH), and Mountain = 16 KPH (10 MPH).    use_roads  A cyclist's propensity to use roads alongside other vehicles. This is a range of values from 0 to 1, where 0 attempts to avoid roads and stay on cycleways and paths, and 1 indicates the rider is more comfortable riding on roads. Based on the  use_roads  factor, roads with certain classifications and higher speeds are penalized in an attempt to avoid them when finding the best path.    use_hills  A cyclist's desire to tackle hills in their routes. This is a range of values from 0 to 1, where 0 attempts to avoid hills and steep grades even if it means a longer (time and distance) path, while 1 indicates the rider does not fear hills and steeper grades. Based on the  use_hills  factor, penalties are applied to roads based on elevation change and grade. These penalties help the path avoid hilly roads in favor of flatter roads or less steep grades where available. Note that it is not always possible to find alternate paths to avoid hills (for example when route locations are in mountainous areas).", 
            "title": "Bicycle costing options"
        }, 
        {
            "location": "/api-reference/#pedestrian-costing-options", 
            "text": "These options are available for pedestrian costing methods.     Pedestrian options  Description      walking_speed  Walking speed in kilometers per hour. Defaults to 5.1 km/hr (3.1 miles/hour).    walkway_factor  A factor that modifies the cost when encountering roads or paths that do not allow vehicles and are set aside for pedestrian use. Pedestrian routes generally attempt to favor using these  walkways and sidewalks . The default walkway_factor is 0.9, indicating a slight preference.    alley_factor  A factor that modifies (multiplies) the cost when  alleys  are encountered. Pedestrian routes generally want to avoid alleys or narrow service roads between buildings. The default alley_factor is 2.0.    driveway_factor  A factor that modifies (multiplies) the cost when encountering a  driveway , which is often a private, service road. Pedestrian routes generally want to avoid driveways (private). The default driveway factor is 5.0.    step_penalty  A penalty in seconds added to each transition onto a path with  steps or stairs . Higher values apply larger cost penalties to avoid paths that contain flights of steps.", 
            "title": "Pedestrian costing options"
        }, 
        {
            "location": "/api-reference/#transit-costing-options", 
            "text": "These options are available for transit costing when the multimodal costing model is used.     Transit options  Description      use_bus  User's desire to use buses.  Range of values from 0 (try to avoid buses) to 1 (strong preference for riding buses).    use_rail  User's desire to use rail/subway/metro.  Range of values from 0 (try to avoid rail) to 1 (strong preference for riding rail).    use_transfers  User's desire to favor transfers.  Range of values from 0 (try to avoid transfers) to 1 (totally comfortable with transfers).     For example, this is a route favoring buses, but also this person walks at a slower speed (4.1km/h)   http://valhalla.mapzen.com/route?json={\"locations\":[{\"lat\":40.749706,\"lon\":-73.991562,\"type\":\"break\",\"street\":\"Penn Plaza\"},{\"lat\":40.73093,\"lon\":-73.991379,\"type\":\"break\",\"street\":\"Wanamaker Place\"}],\"costing\":\"multimodal\",\"costing_options\":{\"transit\":{\"use_bus\":\"1.0\",\"use_rail\":\"0.0\",\"use_transfers\":\"0.3\"},\"pedestrian\":{\"walking_speed\":\"4.1\"}}} api_key=mapzen-xxxxxxx  Note that you must append your own  Mapzen API key  to the URL, following  api_key=  at the end.", 
            "title": "Transit costing options"
        }, 
        {
            "location": "/api-reference/#directions-options", 
            "text": "Options  Description      units  Distance units for output. Allowable unit types are miles (or mi) and kilometers (or km). If no unit type is specified, the units default to kilometers.    language  The language of the narration instructions based on the  IETF BCP 47  language tag string. If no language is specified or the specified language is unsupported, United States-based English (en-US) is used. Currently supported language tags with alias in parentheses:  cs-CZ (cs), de-DE (de), en-US (en), en-US-x-pirate (pirate), es-ES (es), fr-FR (fr), it-IT (it).    narrative  Flag to allow users to disable narrative production. Locations, shape, length, and time are still returned. The narrative production is enabled by default.", 
            "title": "Directions options"
        }, 
        {
            "location": "/api-reference/#other-request-options", 
            "text": "Options  Description      date_time  This is the local date and time at the location. type 0 - Current departure time. 1 - Specified departure time 2 - Specified arrival time. Not yet implemented for multimodal costing method. value  - the date and time is specified in ISO 8601 format (YYYY-MM-DDThh:mm) in the local time zone of departure or arrival.  For example \"2016-07-03T08:06\" NOTE: This option is not supported for our Matrix service.    out_format  Output format. If no  out_format  is specified, JSON is returned. Future work includes PBF (protocol buffer) support.    id  Name your route request. If  id  is specified, the naming will be sent thru to the response.     This is an example of a transit route departing on 2016-03-29 at 08:00. http://valhalla.mapzen.com/route?json={\"locations\":[{\"lat\":40.749706,\"lon\":-73.991562,\"type\":\"break\",\"street\":\"Penn Plaza\"},{\"lat\":40.73093,\"lon\":-73.991379,\"type\":\"break\",\"street\":\"Wanamaker Place\"}],\"costing\":\"multimodal\",\"date_time\":{\"type\":1,\"value\":\"2016-03-29T08:00\"}} api_key=mapzen-xxxxxxx  Note that you must append your own  Mapzen API key  to the URL, following  api_key=  at the end.", 
            "title": "Other request options"
        }, 
        {
            "location": "/api-reference/#outputs-of-a-route", 
            "text": "If a route has been named in the request using the optional  id=  input, then the name will be returned as a string  id  on the JSON object.  The route results are returned as a  trip . This is a JSON object that contains details about the trip, including locations, a summary with basic information about the entire trip, and a list of  legs .  Basic trip information includes:     Trip Item  Description      status  Status code.    status_message  Status message.    units  The specified units of length are returned, either kilometers or miles.    language  The language of the narration instructions. If the user specified a language in the directions options and the specified language was supported - this returned value will be equal to the specified value. Otherwise, this value will be the default (en-US) language.    locations  Location information is returned in the same form as it is entered with additional fields to indicate the side of the street.     The summary JSON object includes:     Summary Item  Description      time  Estimated elapsed time to complete the trip.    length  Distance traveled for the entire trip. Units are either miles or kilometers based on the input units specified.    min_lat  Minimum latitude of a bounding box containing the route.    min_lon  Minimum longitude of a bounding box containing the route.    max_lat  Maximum latitude of a bounding box containing the route.    max_lon  Maximum longitude of a bounding box containing the route.", 
            "title": "Outputs of a route"
        }, 
        {
            "location": "/api-reference/#trip-legs-and-maneuvers", 
            "text": "A  trip  contains one or more  legs . For  n  number of  break  locations, there are  n-1  legs.  Through  locations do not create separate legs.  Each leg of the trip includes a summary, which is comprised of the same information as a trip summary but applied to the single leg of the trip. It also includes a  shape , which is an  encoded polyline  of the route path, and a list of  maneuvers  as a JSON array. For more about decoding route shapes, see these  code examples .  Each maneuver includes:     Maneuver Item  Description      type  Type of maneuver. See below for a list.    instruction  Written maneuver instruction. Describes the maneuver, such as \"Turn right onto Main Street\".    verbal_transition_alert_instruction  Text suitable for use as a verbal alert in a navigation application. The transition alert instruction will prepare the user for the forthcoming transition. For example: \"Turn right onto North Prince Street\".    verbal_pre_transition_instruction  Text suitable for use as a verbal message immediately prior to the maneuver transition. For example \"Turn right onto North Prince Street, U.S. 2 22\".    verbal_post_transition_instruction  Text suitable for use as a verbal message immediately after the maneuver transition. For example \"Continue on U.S. 2 22 for 3.9 miles\".    street_names  List of street names that are consistent along the entire maneuver.    begin_street_names  When present, these are the street names at the beginning of the maneuver (if they are different than the names that are consistent along the entire maneuver).    time  Estimated time along the maneuver in seconds.    length  Maneuver length in the units specified.    begin_shape_index  Index into the list of shape points for the start of the maneuver.    end_shape_index  Index into the list of shape points for the end of the maneuver.    toll  True if the maneuver has any toll, or portions of the maneuver are subject to a toll.    rough  True if the maneuver is unpaved or rough pavement, or has any portions that have rough pavement.    gate  True if a gate is encountered on this maneuver.    ferry  True if a ferry is encountered on this maneuver.    sign  Contains the interchange guide information at a road junction associated with this maneuver. See below for details.    roundabout_exit_count  The spoke to exit roundabout after entering.    depart_instruction  Written depart time instruction. Typically used with a transit maneuver, such as \"Depart: 8:04 AM from 8 St - NYU\".    verbal_depart_instruction  Text suitable for use as a verbal depart time instruction. Typically used with a transit maneuver, such as \"Depart at 8:04 AM from 8 St - NYU\".    arrive_instruction  Written arrive time instruction. Typically used with a transit maneuver, such as \"Arrive: 8:10 AM at 34 St - Herald Sq\".    verbal_arrive_instruction  Text suitable for use as a verbal arrive time instruction. Typically used with a transit maneuver, such as \"Arrive at 8:10 AM at 34 St - Herald Sq\".    transit_info  Contains the attributes that descibe a specific transit route. See below for details.    verbal_multi_cue  True if the  verbal_pre_transition_instruction  has been appended with the verbal instruction of the next maneuver.    travel_mode  Travel mode. \"drive\" \"pedestrian\" \"bicycle\" \"transit\"    travel_type  Travel type for drive. \"car\" Travel type for pedestrian. \"foot\" Travel type for bicycle. \"road\" Travel type for transit. Tram or light rail = \"tram\" Metro or subway = \"metro\" Rail = \"rail\" Bus = \"bus\" Ferry = \"ferry\" Cable car = \"cable_car\" Gondola = \"gondola\" Funicular = \"funicular\"     For the maneuver  type , the following are available:  kNone = 0;\nkStart = 1;\nkStartRight = 2;\nkStartLeft = 3;\nkDestination = 4;\nkDestinationRight = 5;\nkDestinationLeft = 6;\nkBecomes = 7;\nkContinue = 8;\nkSlightRight = 9;\nkRight = 10;\nkSharpRight = 11;\nkUturnRight = 12;\nkUturnLeft = 13;\nkSharpLeft = 14;\nkLeft = 15;\nkSlightLeft = 16;\nkRampStraight = 17;\nkRampRight = 18;\nkRampLeft = 19;\nkExitRight = 20;\nkExitLeft = 21;\nkStayStraight = 22;\nkStayRight = 23;\nkStayLeft = 24;\nkMerge = 25;\nkRoundaboutEnter = 26;\nkRoundaboutExit = 27;\nkFerryEnter = 28;\nkFerryExit = 29;\nkTransit = 30;\nkTransitTransfer = 31;\nkTransitRemainOn = 32;\nkTransitConnectionStart = 33;\nkTransitConnectionTransfer = 34;\nkTransitConnectionDestination = 35;\nkPostTransitConnectionDestination = 36;  The maneuver  sign  may contain four lists of interchange sign elements as follows:   exit_number_elements  = list of exit number elements. If an exit number element exists, it is typically just one value.  exit_branch_elements  = list of exit branch elements. The exit branch element text is the subsequent road name or route number after the sign.  exit_toward_elements  = list of exit toward elements. The exit toward element text is the location where the road ahead goes - the location is typically a control city, but may also be a future road name or route number.  exit_name_elements  = list of exit name elements. The exit name element is the interchange identifier - typically not used in the US.   Each maneuver sign element includes:     Maneuver Sign Element Item  Description      text  Interchange sign text.  exit number example: 91B. exit branch example: I 95 North. exit toward example: New York. exit name example: Gettysburg Pike.    consecutive_count  The frequency of this sign element within a set a consecutive signs. This item is optional.     A maneuver  transit_info  includes:     Maneuver Transit Route Item  Description      onestop_id  Global transit route identifier from Transitland.    short_name  Short name describing the transit route. For example \"N\".    long_name  Long name describing the transit route. For example \"Broadway Express\".    headsign  The sign on a public transport vehicle that identifies the route destination to passengers. For example \"ASTORIA - DITMARS BLVD\".    color  The numeric color value associated with a transit route. The value for yellow would be \"16567306\".    text_color  The numeric text color value associated with a transit route. The value for black would be \"0\".    description  The description of the the transit route. For example \"Trains operate from Ditmars Boulevard, Queens, to Stillwell Avenue, Brooklyn, at all times. N trains in Manhattan operate along Broadway and across the Manhattan Bridge to and from Brooklyn. Trains in Brooklyn operate along 4th Avenue, then through Borough Park to Gravesend. Trains typically operate local in Queens, and either express or local in Manhattan and Brooklyn, depending on the time. Late night trains operate via Whitehall Street, Manhattan. Late night service is local\".    operator_onestop_id  Global operator/agency identifier from Transitland.    operator_name  Operator/agency name. For example \"BART\", \"King County Marine Divison\", etc.  Short name is used over long name.    operator_url  Operator/agency URL. For example \"http://web.mta.info/\".    transit_stops  A list of the stops/stations associated with a specific transit route. See below for details.     A  transit_stop  includes:     Transit Stop Item  Description      type  The type of stop (simple stop=0; station=1)    onestop_id  Global transit stop identifier from Transitland.    name  Name of the stop/station. For example \"14 St - Union Sq\".    arrival_date_time  Arrival date/time using the ISO 8601 format (YYYY-MM-DDThh:mm). For example \"2015-12-29T08:06\".    departure_date_time  Departure date/time using the ISO 8601 format (YYYY-MM-DDThh:mm). For example \"2015-12-29T08:06\".    is_parent_stop  True if this stop is a marked as a parent stop.    assumed_schedule  True if the times are based on an assumed schedule because the actual schedule is not known.    lat  Latitude of the transit stop in degrees.    lon  Longitude of the transit stop in degrees.     Continuing with the earlier routing example from the Detroit, Michigan area, a maneuver such as this one may be returned with that request:  {\"begin_shape_index\":0,\"length\":0.109,\"end_shape_index\":1,\"instruction\":\"Go south on Appleton.\",\"street_names\":[\"Appleton\"],\"type\":1,\"time\":0}  In the future, look for additional maneuver information to enhance navigation applications, including landmark usage.", 
            "title": "Trip legs and maneuvers"
        }, 
        {
            "location": "/api-reference/#return-codes-and-conditions", 
            "text": "The following is a table of error conditions that may occur for a particular request. In general, the service follows the  HTTP specification . That is to say that  5xx  returns are generally ephemeral server problems that should be resolved shortly or are the result of a bug.  4xx  returns are used to mark requests that cannot be carried out, generally due to bad input in the request or problems with the underlying data. A  2xx  return is expected when there is a successful route result or  trip , as described above.     Code  Body  Description      200  your_trip_json  A happy bit of json describing your  trip  result    400  Failed to parse json request  You need a valid json request    400  Failed to parse location  You need a valid location object in your json request    400  Failed to parse correlated location  There was a problem with the location once correlated to the route network    400  Insufficiently specified required parameter 'locations'  You forgot the locations parameter    400  No edge/node costing provided  You forgot the costing parameter    400  Insufficient number of locations provided  You didn't provide enough locations    400  Exceeded max route locations of X  You are asking for too many locations    400  Locations are in unconnected regions. Go check/edit the map at osm.org  You are routing between regions of no connectivity    400  No costing method found for 'X'  You are asking for a non-existent costing mode    400  Path distance exceeds the max distance limit  You want to travel further than this mode allows    400  No suitable edges near location  There were no edges applicable to your mode of travel near the input location    400  No data found for location  There was no route data tile at the input location    400  No path could be found for input  There was no path found between the input locations    404  Try any of: '/route' '/locate'  You asked for an invalid path    405  Try a POST or GET request instead  We only support GET and POST requests    500  Failed to parse intermediate request format  Had a problem reading an intermediate request format    500  Failed to parse TripPath  Had a problem reading the computed path from Protobuf    500  Could not build directions for TripPath  Had a problem using the trip path to create TripDirections    500  Failed to parse TripDirections  Had a problem using the trip directions to serialize a json response    501  Not implemented  Not Implemented", 
            "title": "Return codes and conditions"
        }, 
        {
            "location": "/add-routing-to-a-map/", 
            "text": "Add Mapzen Turn-by-Turn routing to a map\n\n\nMapzen Turn-by-Turn, which is a routing service powered by the Valhalla engine, adds routing and navigation to web or mobile applications. The service works globally, and provides dynamic and customizable routing by driving, walking, using multimodal and transit options, or bicycling, with clear directions for maneuvers along the route. In this walkthrough, you will learn how to make a map featuring Mapzen Turn-by-Turn. The map you create will provide:\n\n\n\n\na route line between map locations (also known as waypoints)\n\n\na text narrative of maneuvers to perform on the route\n\n\ndistances along your route and estimated travel times\n\n\nfunctionality to drag the route start and endpoints to get a different path\n\n\nthe ability change the mode of transportation, such as automobile, bicycle, pedestrian, or multimodal\n\n\n\n\nIn this walkthrough, you will be planning a family \nvacation\n for travel by car from your home of Chicago, Illinois to visit a popular theme park in Anaheim, California. In your code, you will enter the start and end points of your trip and Mapzen Turn-by-Turn will calculate the route.\n\n\nTo complete the tutorial, you should have some familiarity with HTML and JavaScript, although all the source code is provided. You will need an \nAPI key\n to use Mapzen Turn-by-Turn, which requires a GitHub account for authorization. You can use any text editor and operating system, but must maintain an Internet connection while you are working. The tutorial should take about an hour to complete.\n\n\nThe map also uses other Mapzen technology, including the \nvector tile service\n and the \nTangram graphics engine\n to draw the features on the map.\n\n\nSign up for a Mapzen Turn-by-Turn API key\n\n\nTo use the routing service, you must first obtain a developer API key from Mapzen. Sign in at https://mapzen.com/developers to create and manage your API keys.\n\n\nMapzen Turn-by-Turn is a shared routing service. As such, there are limitations on requests, maximum distances, and numbers of locations to prevent individual users from degrading the overall system performance.\n\n\n\n\nGo to https://mapzen.com/developers.\n\n\nSign in with your GitHub account. If you have not done this before, you need to agree to the terms first.\n\n\nCreate a new key, and optionally, give it a project name so you can remember the purpose of the key.\n\n\nKeep the web page open so you can copy the key into the source code later.\n\n\n\n\nCreate an index page\n\n\nYou are ready to start building your map. You will need to use a text editor to update the HTML.\n\n\nSuggested text editor applications include \nAtom - OS X, Windows, Linux\n; \nNotepad++ - Windows\n; \nTextWrangler - OS X\n; and  \nSublime - OS X, Windows, Linux; free trial\n. While you can use the apps installed with your operating system, such as Notepad or TextEdit, they do not provide the helpful indentations, code coloring and autocomplete, or text alignment options found in the other editors. For TextEdit, you must go to the Format menu and click Make Plain Text to use the plain-text version of the file. Do not use an app that applies rich formatting, such as Word or Wordpad.\n\n\n\n\nStart your text editor with a blank document and copy and paste the following HTML. (Note: If the text editor you are using requires you to name and save a document at the time when it is first created, call the file \nindex.html\n.)\n\n\n\n\nAdd the basic HTML tags, including \n!DOCTYPE HTML\n, \nhtml\n, \nhead\n, and \nbody\n. Your HTML might look like this:\n\n\nhtml\n\n!DOCTYPE html\n\n\nhtml\n\n\nhead\n\n\n/head\n\n\nbody\n\n\n/body\n\n\n/html\n\n\n\n\n\n\nIn the \nhead\n tag, add a title, such as \ntitle\nMy Routing Map\n/title\n.\n\n\n\n\nName your the document \nindex.html\n (where the file name is \nindex\n and the type is \n.html\n) and save it.\n\n\n\n\nYou HTML should look like this:\n\n\n!DOCTYPE html\n\n\nhtml\n\n\nhead\n\n  \ntitle\nMy Routing Map\n/title\n\n\n/head\n\n\nbody\n\n\n/body\n\n\n/html\n\n\n\n\n\nStart a server to get the project running locally\n\n\nYou will be using the \nTangram graphics engine\n to draw the features on the map. To see your changes on a Tangram map, you need to start a local web server on your machine. You need a web server because some scripts could be blocked by your browser\u2019s security settings.\n\n\n\n\nOpen a terminal window in the path of your working folder. For example, if your files are in your documents folder, you can type \ncd documents/routing-tutorial\n (where \ncd\n means to change the active directory) to navigate to your working folder.\n\n\n\n\nAt the prompt, type \npython -m SimpleHTTPServer\n to start a web server using Python. You should receive a message similar to this in the terminal: \nServing HTTP on 0.0.0.0 port 8000 ...\n. If you are having problems, you can instead try the command \npython -m http.server 8000\n (for use with Python 3).\n\n\n\n\n\n\n\n\nOpen your browser to \nhttp://localhost:8000\n. (Localhost is a shortcut hostname that a computer can use to refer to itself, and is not viewable by anyone else.)\n\n\n\n\n\n\nIf the step was successful, you should see a blank index page with your title (My Routing Map) showing in the browser tab.\n\n\n\n\nAdd references to CSS and JavaScript files\n\n\nWhen you request a route from Mapzen Turn-by-Turn, you are sending and receiving \nJSON\n, which is a human-readable text format. This JSON can then be drawn on a map and shown as instructions for maneuvers along the route. The Leaflet JavaScript library, which provides tools for zooming, displaying attributions, and drawing symbols, is one way you can display routes on web and mobile maps. Leaflet is extensible, and developers have built additional tools for Leaflet maps, including the \nLeaflet Routing Machine (LRM)\n and Mapzen plug-ins for routing.\n\n\nBecause you are working with several external cascading style sheet (CSS) and JavaScript files, you need to add references to them in your index.html file. These include style sheets and JavaScript files for Leaflet, Leaflet Routing Machine, and Mapzen Turn-by-Turn. You will need to add these into the \nhead\n and \nbody\n sections of the index.html.\n\n\nYou are linking to these CSS and JS files from a remote website, rather than from a file on your machine. You can also find these files on the web or install them through a package manager if you prefer to download a local copy.\n\n\n\n\n\n\nIn index.html, in the \nhead\n section, add a reference to the Leaflet CSS file.\n\n\nhtml\n\nlink rel=\"stylesheet\" href=\"http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.css\"\n\n\n\n\n\n\nIn the \nhead\n section, add a reference to the Mapzen CSS file.\n\n\nhtml\n\nlink rel=\"stylesheet\" href=\"https://unpkg.com/lrm-mapzen/dist/leaflet.routing.mapzen.css\"\n\n\n\n\n\n\nIn the \nbody\n section, add the Leaflet JavaScript file.\n\n\nhtml\n\nscript src=\"http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.js\"\n/script\n\n\n\n\n\n\nAdd the Tangram JavaScript file, which is the rendering engine you will be using to draw the map.\n\n\nhtml\n\nscript src=\"https://mapzen.com/tangram/0.7.0/tangram.min.js\"\n/script\n\n\n\n\n\n\nAdd the Leaflet Routing Machine JavaScript file.\n\n\nhtml\n\nscript src=\"https://cdnjs.cloudflare.com/ajax/libs/leaflet-routing-machine/3.0.0/leaflet-routing-machine.min.js\"\n/script\n\n\n\n\n\n\nAdd the Mapzen JavaScript file.\n\n\nhtml\n\nscript src=\"https://unpkg.com/lrm-mapzen/dist/lrm-mapzen.js\"\n/script\n\n\n\n\n\n\nSave your edits and refresh the browser.\n\n\n\n\n\n\nAfter adding these, your index.html file should look something like this. Note that JavaScript can be inserted in either the \nhead\n or the \nbody\n, but the \nbody\n may improve loading of the page.\n\n\n!DOCTYPE html\n\n\nhtml\n\n\nhead\n\n  \ntitle\nMy Routing Map\n/title\n\n  \nlink rel=\nstylesheet\n href=\nhttp://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.css\n\n  \nlink rel=\nstylesheet\n href=\nhttps://unpkg.com/lrm-mapzen/dist/leaflet.routing.mapzen.css\n\n\n/head\n\n\nbody\n\n  \nscript src=\nhttp://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.js\n/script\n\n  \nscript src=\nhttps://mapzen.com/tangram/0.7.0/tangram.min.js\n/script\n\n  \nscript src=\nhttps://cdnjs.cloudflare.com/ajax/libs/leaflet-routing-machine/3.0.0/leaflet-routing-machine.min.js\n/script\n\n  \nscript src=\nhttps://unpkg.com/lrm-mapzen/dist/lrm-mapzen.js\n/script\n\n\n/body\n\n\n/html\n\n\n\n\n\nAt this point, your browser page is still empty. As you are working, it\u2019s a good idea to save your edits and periodically reload the browser page. This helps you identify problems quicker and trace them back to your most recent changes. You should also monitor the terminal window for status messages. If your code is working properly, you should see a message of 200 in the terminal window, as 200 is the HTTP response code for successful requests.\n\n\nHowever, seeing a 404 error often means that the file cannot be found. You should make sure the paths in your HTML are correct before you continue further.\n\n\n\n\nAdd a map to the page\n\n\nTo display a Leaflet map on a page, you need a \ndiv\n element with an ID value, as well as a size for the box containing the map. Then, you can add the code to set the map and use Tangram to render it. If you want to know more about initializing a Leaflet map, see the \nLeaflet getting started documentation\n.\n\n\n\n\n\n\nAt the bottom of the \nhead\n section, add a \nstyle\n tag and the following size attributes to set the size of the map.\n\n\nhtml\n\nstyle\n\n  #map {\n    height: 100%;\n    width: 100%;\n    position: absolute;\n  }\n\n/style\n\n\n\n\n\n\nAt the top of the \nbody\n section, add the \ndiv\n.\n\n\nhtml\n\ndiv id=\"map\"\n/div\n\n\n\n\n\n\nImmediately after the other \nscript\n references, add the following JavaScript within a \nscript\n tag to initialize Leaflet. \nL.xxxxx\n is a convention used with the Leaflet API. To make sure the scripts load in the proper order, this code must be placed after the dependencies.\n\n\nhtml\n\nscript\n\n  var map = L.map('map');\n\n/script\n\n\n\n\n\n\nSave your edits and refresh the browser. You should see a gray canvas with zoom controls and a Leaflet attribution in the bottom corner.\n\n\n\n\n\n\n\n\nYour index.html should look something like this:\n\n\n!DOCTYPE html\n\n\nhtml\n\n\nhead\n\n  \ntitle\nMy Routing Map\n/title\n\n  \nlink rel=\nstylesheet\n href=\nhttp://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.css\n\n  \nlink rel=\nstylesheet\n href=\nhttps://unpkg.com/lrm-mapzen/dist/leaflet.routing.mapzen.css\n\n  \nstyle\n\n    #map {\n      height: 100%;\n      width: 100%;\n      position: absolute;\n    }\n  \n/style\n\n\n/head\n\n\nbody\n\n  \ndiv id=\nmap\n/div\n\n  \nscript src=\nhttp://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.js\n/script\n\n  \nscript src=\nhttps://mapzen.com/tangram/0.7.0/tangram.min.js\n/script\n\n  \nscript src=\nhttps://cdnjs.cloudflare.com/ajax/libs/leaflet-routing-machine/3.0.0/leaflet-routing-machine.min.js\n/script\n\n  \nscript src=\nhttps://unpkg.com/lrm-mapzen/dist/lrm-mapzen.js\n/script\n\n  \nscript\n\n    var map = L.map('map');\n  \n/script\n\n\n/body\n\n\n/html\n\n\n\n\n\nAdd a Tangram map to the frame\n\n\nAt this point, you have enabled the basic Leaflet controls and have a canvas for your map, but still need to tell Leaflet to use Tangram to draw the contents of the map.\n\n\nTangram uses a scene file in .yaml format to specify the what it should draw and how the features should appear in the map. A basic scene file has a reference to a data source (in this case, OpenStreetMap data from Mapzen\u2019s \nvector tile service\n and the colors and types of features to draw. This scene file includes a demonstration API key for use with the vector tile service in this tutorial; if you want to put this map into production, you should obtain your own \nAPI key\n.\n\n\nIn the code you will add, the \nscene:\n item sets the Tangram scene file to use for drawing and \nattribution:\n is what appears in the bottom corner of the map as the map attribution, overriding the default Leaflet attribution. This source code links to a scene file created by Mapzen, but you can modify the \nscene:\n parameter to point to a scene hosted at a different URL or a local file.\n\n\nNote that Tangram and the vector tile service are not required for Mapzen Turn-by-Turn routing. If you prefer to use other data, refer to the \nLeaflet documentation\n to learn how reference tile layers in a map.\n\n\n\n\n\n\nInside the \nscript\n tags, immediately after the \nvar map = L.map('map');\n line, add the following code to use Tangram.\n\n\njs\nvar layer = Tangram.leafletLayer({\n  scene: 'https://raw.githubusercontent.com/tangrams/cinnabar-style/gh-pages/cinnabar-style.yaml',\n  attribution: '\na href=\"https://mapzen.com/tangram\" target=\"_blank\"\nTangram\n/a\n | \na href=\"http://www.openstreetmap.org/about\" target=\"_blank\"\ncopy; OSM contributors | \na href=\"https://mapzen.com/\" target=\"_blank\"\nMapzen\n/a\n',\n});\nlayer.addTo(map);\n\n\n\n\n\n\nOn the next line, immediately after \nlayer.addTo(map);\n, add a line to initialize the map display. This sets the extent of the map and the zoom level. The map is centered on Chicago, Illinois, with a zoom level that allows you to see the streets and features of the city. Zoom levels are similar to map scales or resolutions, where a smaller value shows a larger area in less detail, and a larger zoom level value depicts smaller area in great detail.\n\n\njs\nmap.setView([41.8758,-87.6189], 16);\n\n\n\n\n\n\nSave your edits and refresh the browser. You should see Leaflet map controls and an updated attribution, and the map should be centered at the location specified.\n\n\n\n\n\n\n\n\nYour \nbody\n section should look like this:\n\n\n[...]\n\nbody\n\n  \ndiv id=\nmap\n/div\n\n  \nscript src=\nhttp://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.js\n/script\n\n  \nscript src=\nhttps://mapzen.com/tangram/0.7.0/tangram.min.js\n/script\n\n  \nscript src=\nhttps://cdnjs.cloudflare.com/ajax/libs/leaflet-routing-machine/3.0.0/leaflet-routing-machine.min.js\n/script\n\n  \nscript src=\nhttps://unpkg.com/lrm-mapzen/dist/lrm-mapzen.js\n/script\n\n  \nscript\n\n    var map = L.map('map');\n    var layer = Tangram.leafletLayer({\n      scene: 'https://raw.githubusercontent.com/tangrams/cinnabar-style/gh-pages/cinnabar-style.yaml',\n      attribution: '\na href=\nhttps://mapzen.com/tangram\n target=\n_blank\nTangram\n/a\n | \na href=\nhttp://www.openstreetmap.org/about\n target=\n_blank\ncopy; OSM contributors | \na href=\nhttps://mapzen.com/\n target=\n_blank\nMapzen\n/a\n',\n    });\n    layer.addTo(map);\n    map.setView([41.8758,-87.6189], 16);\n  \n/script\n\n\n/body\n\n[...]\n\n\n\n\nIf your map is not loading properly, first check the terminal window for status messages and resolve any 404 errors. You can also copy the example source code at the end of the section in case you mistyped any of the steps. If your project worked until now, ensure that your browser has WebGL support enabled (although it is unusual for it to be turned off) or turn on the developer tools in your browser to see if you can debug further. If you are still having trouble, add an issue to the \ndocumentation GitHub repository\n so it can be investigated.\n\n\nAdd waypoints for routing\n\n\nSo far, you have referenced the necessary files, initialized Leaflet with a map container on the  page, and added Tangram to the map. Now, you are ready to add the routing code to your page using the Leaflet Routing Machine plug-in.\n\n\nIn the simplest implementation, your map will not provide the ability to search for places through geocoding or inputting coordinates otherwise. Therefore, you need to set the waypoints in your code. As you add functionality to your web page, you can set the initial coordinates through user interaction.\n\n\n\n\n\n\nAdd \n//\n at the beginning of the \nmap.setView([41.8758,-87.6189], 16)\n line to comment out that code. You no longer need to set the extent manually like this because the routing environment will be specifying it.\n\n\njs\n//map.setView([41.8758,-87.6189], 16);\n\n\n\n\n\n\nInside the \nscript\n tag, and after the commented line, initialize routing with the following code. You can substitute your own coordinates for the start and end locations of the routing. These coordinates take you from Chicago, Illinois, to the entrance gates of the theme park in Anaheim, California.\n\n\njs\nL.Routing.control({\n  waypoints: [\n    L.latLng(41.8758,-87.6189),\n    L.latLng(33.8128,-117.9259)\n  ]\n}).addTo(map);\n\n\n\n\nThis map shows the default route and driving directions from Leaflet Routing Machine, which uses Open Source Routing Machine (OSRM) as the underlying routing engine.\n\n\n\n\n\n\nYour \nbody\n section should look like this:\n\n\n[...]\n\nbody\n\n  \ndiv id=\nmap\n/div\n\n  \nscript src=\nhttp://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.js\n/script\n\n  \nscript src=\nhttps://mapzen.com/tangram/0.7.0/tangram.min.js\n/script\n\n  \nscript src=\nhttps://cdnjs.cloudflare.com/ajax/libs/leaflet-routing-machine/3.0.0/leaflet-routing-machine.min.js\n/script\n\n  \nscript src=\nhttps://unpkg.com/lrm-mapzen/dist/lrm-mapzen.js\n/script\n\n  \nscript\n\n    var map = L.map('map');\n    var layer = Tangram.leafletLayer({\n      scene: 'https://raw.githubusercontent.com/tangrams/cinnabar-style/gh-pages/cinnabar-style.yaml',\n      attribution: '\na href=\nhttps://mapzen.com/tangram\n target=\n_blank\nTangram\n/a\n | \na href=\nhttp://www.openstreetmap.org/about\n target=\n_blank\ncopy; OSM contributors | \na href=\nhttps://mapzen.com/\n target=\n_blank\nMapzen\n/a\n',\n    });\n    layer.addTo(map);\n    //map.setView([41.8758,-87.6189], 16);\n    L.Routing.control({\n      waypoints: [\n        L.latLng(41.8758,-87.6189),\n        L.latLng(33.8128,-117.9259)\n      ]\n    }).addTo(map);\n  \n/script\n\n\n/body\n\n[...]\n\n\n\n\nSet Mapzen Turn-by-Turn as the routing engine\n\n\nBy default, the Leaflet Routing Machine plug-in uses \nOpen Source Routing Machine (OSRM)\n to perform the routing queries, so you need to substitute Mapzen Turn-by-Turn as the routing engine. To use a different engine, you need to set the \nrouter:\n to Mapzen and initialize a \nformatter:\n with functions for units and other conversions.\n\n\n\n\n\n\nReplace the code within the \nL.Routing.control\n block with the following code to change the routing engine to Mapzen Turn-by-Turn. By including a \nsummaryTemplate\n, the directions can include totals of the length and expected time en route. Note that the \nrouter:\n has two items with placeholders; you will update these in the next steps.\n\n\njs\n[...]\nL.Routing.control({\n  waypoints: [\n    L.latLng(41.8758,-87.6189),\n    L.latLng(33.8128,-117.9259)\n  ],\n  router: L.Routing.mapzen('mapzen-xxxxxx', {costing:'your-routing-mode'}),\n  formatter: new L.Routing.mapzenFormatter(),\n  summaryTemplate:'\ndiv class=\"start\"\n{name}\n/div\ndiv class=\"info {costing}\"\n{distance}, {time}\n/div\n',\n  routeWhileDragging: false\n}).addTo(map);\n[...]\n\n\n\n\n\n\nGo back to the https://mapzen.com/developers page and copy your API key to the clipboard.\n\n\n\n\nPaste your own API key in place of \nmapzen-xxxxxx\n inside the single quotes. The routing will only load if you use a valid API key.\n\n\n\n\nChange the options object for the transportation mode {costing:\nyour-routing-mode\n} to {costing:\nauto\n} to perform routing by automobile, again maintaining the single quotes.\n\n\njs\nrouter: L.Routing.mapzen('mapzen-xxxxxx', {costing:'auto'}),\n\n\n\n\n\n\nSave your edits and refresh the browser. You should see a map, the route line, and updated icons and summary text in the narration box. The maneuver instructions are simpler and more concise.\n\n\n\n\nThis map shows the Mapzen Turn-by-Turn routing engine with simplified narration and driving instructions.\n\n\n\n\n\n\nThe \nbody\n section should look something like this, but with your own API key for the \nrouter\n:\n\n\n[...]\n\nbody\n\n  \ndiv id=\nmap\n/div\n\n  \nscript src=\nhttp://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.js\n/script\n\n  \nscript src=\nhttps://mapzen.com/tangram/0.7.0/tangram.min.js\n/script\n\n  \nscript src=\nhttps://cdnjs.cloudflare.com/ajax/libs/leaflet-routing-machine/3.0.0/leaflet-routing-machine.min.js\n/script\n\n  \nscript src=\nhttps://unpkg.com/lrm-mapzen/dist/lrm-mapzen.js\n/script\n\n  \nscript\n\n    var map = L.map('map');\n    var layer = Tangram.leafletLayer({\n      scene: 'https://raw.githubusercontent.com/tangrams/cinnabar-style/gh-pages/cinnabar-style.yaml',\n      attribution: '\na href=\nhttps://mapzen.com/tangram\n target=\n_blank\nTangram\n/a\n | \na href=\nhttp://www.openstreetmap.org/about\n target=\n_blank\ncopy; OSM contributors | \na href=\nhttps://mapzen.com/\n target=\n_blank\nMapzen\n/a\n',\n    });\n    layer.addTo(map);\n    //map.setView([41.8758,-87.6189], 16);\n    L.Routing.control({\n      waypoints: [\n        L.latLng(41.8758,-87.6189),\n        L.latLng(33.8128,-117.9259)\n      ],\n      router: L.Routing.mapzen('mapzen-xxxxxx', {costing:'auto'}),\n      formatter: new L.Routing.mapzenFormatter(),\n      summaryTemplate:'\ndiv class=\nstart\n{name}\n/div\ndiv class=\ninfo {costing}\n{distance}, {time}\n/div\n',\n      routeWhileDragging: false\n    }).addTo(map);\n  \n/script\n\n\n/body\n\n[...]\n\n\n\n\nMapzen Turn-by-Turn also provides the ability to specify additional waypoints through which your route should pass, such as visiting family in Kansas and Arizona and bobbing your head at Grand Canyon National Park. Currently, you can drag the start and end points (and add waypoints in between) to update the routing, but the route will not be recalculated until you drop the points. On your own, you can set the option for \nrouteWhileDragging\n to \ntrue\n if you want to update the route while moving points on the map, although this can be slow and costly to make many queries. You can read more about the options available for \nL.Routing.control\n in the \nLeaflet Routing Machine API documentation\n.\n\n\nChange the route line color\n\n\nThe symbols for the basemap are set in the scene file, but the route line may be hard to distinguish from the roads in your map. You can use \nL.routing.control\n to update the color of the route line.\n\n\n\n\n\n\nAfter the closing line of the \nwaypoints:\n block and immediately before the \nrouter:\n block, insert the following source code:\n\n\njs\nlineOptions: {\n  styles: [ {color: 'white',opacity: 0.8, weight: 12},\n          {color: '#2676C6', opacity: 1, weight: 6}\n]},\n\n\n\n\n\n\nSave your edits and refresh the browser. The line should change to blue and look thicker than before.\n\n\n\n\n\n\n\n\nClick through the points in the directions list to pan and zoom the map to the location of each maneuver, including your destination.\n\n\n\n\n\n\n\n\nThe \nbody\n section should look something like this, but with your own API key for the \nrouter\n:\n\n\n[...]\n\nbody\n\n  \ndiv id=\nmap\n/div\n\n  \nscript src=\nhttp://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.js\n/script\n\n  \nscript src=\nhttps://mapzen.com/tangram/0.7.0/tangram.min.js\n/script\n\n  \nscript src=\nhttps://cdnjs.cloudflare.com/ajax/libs/leaflet-routing-machine/3.0.0/leaflet-routing-machine.min.js\n/script\n\n  \nscript src=\nhttps://unpkg.com/lrm-mapzen/dist/lrm-mapzen.js\n/script\n\n  \nscript\n\n    var map = L.map('map');\n    var layer = Tangram.leafletLayer({\n      scene: 'https://raw.githubusercontent.com/tangrams/cinnabar-style/gh-pages/cinnabar-style.yaml',\n      attribution: '\na href=\nhttps://mapzen.com/tangram\n target=\n_blank\nTangram\n/a\n | \na href=\nhttp://www.openstreetmap.org/about\n target=\n_blank\ncopy; OSM contributors | \na href=\nhttps://mapzen.com/\n target=\n_blank\nMapzen\n/a\n',\n    });\n    layer.addTo(map);\n    //map.setView([41.8758,-87.6189], 16);\n    L.Routing.control({\n      waypoints: [\n        L.latLng(41.8758,-87.6189),\n        L.latLng(33.8128,-117.9259)\n      ],\n      lineOptions: {\n        styles: [ {color: 'white',opacity: 0.8, weight: 12},\n                {color: '#2676C6', opacity: 1, weight: 6}\n      ]},\n      router: L.Routing.mapzen('mapzen-xxxxxx', {costing:'auto'}),\n      formatter: new L.Routing.mapzenFormatter(),\n      summaryTemplate:'\ndiv class=\nstart\n{name}\n/div\ndiv class=\ninfo {costing}\n{distance}, {time}\n/div\n',\n      routeWhileDragging: false\n    }).addTo(map);\n  \n/script\n\n\n/body\n\n[...]\n\n\n\n\nWalkthrough summary and next steps\n\n\nIn this walkthrough, you learned the basics of making a map with Mapzen Turn-by-Turn routing. You can now take what you have learned and add more functionality to your map and embed it in your own projects. For example, you may want to add code to allow the user to pick routing locations with a button, change the costing mode used for routing, or set other options. Each of the routing modes Mapzen Turn-by-Turn supports has many options that can be used to influence the output route and estimated time. For example, automobile routing allows you to set penalties and costs to avoid toll roads or crossing international borders, and bicycle routing allows you to specify the category of bicycle so you are routed on appropriate paths for your equipment.\n\n\nYou can review the \ndocumentation\n to learn more about routing with Mapzen Turn-by-Turn.", 
            "title": "Tutorial"
        }, 
        {
            "location": "/add-routing-to-a-map/#add-mapzen-turn-by-turn-routing-to-a-map", 
            "text": "Mapzen Turn-by-Turn, which is a routing service powered by the Valhalla engine, adds routing and navigation to web or mobile applications. The service works globally, and provides dynamic and customizable routing by driving, walking, using multimodal and transit options, or bicycling, with clear directions for maneuvers along the route. In this walkthrough, you will learn how to make a map featuring Mapzen Turn-by-Turn. The map you create will provide:   a route line between map locations (also known as waypoints)  a text narrative of maneuvers to perform on the route  distances along your route and estimated travel times  functionality to drag the route start and endpoints to get a different path  the ability change the mode of transportation, such as automobile, bicycle, pedestrian, or multimodal   In this walkthrough, you will be planning a family  vacation  for travel by car from your home of Chicago, Illinois to visit a popular theme park in Anaheim, California. In your code, you will enter the start and end points of your trip and Mapzen Turn-by-Turn will calculate the route.  To complete the tutorial, you should have some familiarity with HTML and JavaScript, although all the source code is provided. You will need an  API key  to use Mapzen Turn-by-Turn, which requires a GitHub account for authorization. You can use any text editor and operating system, but must maintain an Internet connection while you are working. The tutorial should take about an hour to complete.  The map also uses other Mapzen technology, including the  vector tile service  and the  Tangram graphics engine  to draw the features on the map.", 
            "title": "Add Mapzen Turn-by-Turn routing to a map"
        }, 
        {
            "location": "/add-routing-to-a-map/#sign-up-for-a-mapzen-turn-by-turn-api-key", 
            "text": "To use the routing service, you must first obtain a developer API key from Mapzen. Sign in at https://mapzen.com/developers to create and manage your API keys.  Mapzen Turn-by-Turn is a shared routing service. As such, there are limitations on requests, maximum distances, and numbers of locations to prevent individual users from degrading the overall system performance.   Go to https://mapzen.com/developers.  Sign in with your GitHub account. If you have not done this before, you need to agree to the terms first.  Create a new key, and optionally, give it a project name so you can remember the purpose of the key.  Keep the web page open so you can copy the key into the source code later.", 
            "title": "Sign up for a Mapzen Turn-by-Turn API key"
        }, 
        {
            "location": "/add-routing-to-a-map/#create-an-index-page", 
            "text": "You are ready to start building your map. You will need to use a text editor to update the HTML.  Suggested text editor applications include  Atom - OS X, Windows, Linux ;  Notepad++ - Windows ;  TextWrangler - OS X ; and   Sublime - OS X, Windows, Linux; free trial . While you can use the apps installed with your operating system, such as Notepad or TextEdit, they do not provide the helpful indentations, code coloring and autocomplete, or text alignment options found in the other editors. For TextEdit, you must go to the Format menu and click Make Plain Text to use the plain-text version of the file. Do not use an app that applies rich formatting, such as Word or Wordpad.   Start your text editor with a blank document and copy and paste the following HTML. (Note: If the text editor you are using requires you to name and save a document at the time when it is first created, call the file  index.html .)   Add the basic HTML tags, including  !DOCTYPE HTML ,  html ,  head , and  body . Your HTML might look like this:  html !DOCTYPE html  html  head  /head  body  /body  /html    In the  head  tag, add a title, such as  title My Routing Map /title .   Name your the document  index.html  (where the file name is  index  and the type is  .html ) and save it.   You HTML should look like this:  !DOCTYPE html  html  head \n   title My Routing Map /title  /head  body  /body  /html", 
            "title": "Create an index page"
        }, 
        {
            "location": "/add-routing-to-a-map/#start-a-server-to-get-the-project-running-locally", 
            "text": "You will be using the  Tangram graphics engine  to draw the features on the map. To see your changes on a Tangram map, you need to start a local web server on your machine. You need a web server because some scripts could be blocked by your browser\u2019s security settings.   Open a terminal window in the path of your working folder. For example, if your files are in your documents folder, you can type  cd documents/routing-tutorial  (where  cd  means to change the active directory) to navigate to your working folder.   At the prompt, type  python -m SimpleHTTPServer  to start a web server using Python. You should receive a message similar to this in the terminal:  Serving HTTP on 0.0.0.0 port 8000 ... . If you are having problems, you can instead try the command  python -m http.server 8000  (for use with Python 3).     Open your browser to  http://localhost:8000 . (Localhost is a shortcut hostname that a computer can use to refer to itself, and is not viewable by anyone else.)    If the step was successful, you should see a blank index page with your title (My Routing Map) showing in the browser tab.", 
            "title": "Start a server to get the project running locally"
        }, 
        {
            "location": "/add-routing-to-a-map/#add-references-to-css-and-javascript-files", 
            "text": "When you request a route from Mapzen Turn-by-Turn, you are sending and receiving  JSON , which is a human-readable text format. This JSON can then be drawn on a map and shown as instructions for maneuvers along the route. The Leaflet JavaScript library, which provides tools for zooming, displaying attributions, and drawing symbols, is one way you can display routes on web and mobile maps. Leaflet is extensible, and developers have built additional tools for Leaflet maps, including the  Leaflet Routing Machine (LRM)  and Mapzen plug-ins for routing.  Because you are working with several external cascading style sheet (CSS) and JavaScript files, you need to add references to them in your index.html file. These include style sheets and JavaScript files for Leaflet, Leaflet Routing Machine, and Mapzen Turn-by-Turn. You will need to add these into the  head  and  body  sections of the index.html.  You are linking to these CSS and JS files from a remote website, rather than from a file on your machine. You can also find these files on the web or install them through a package manager if you prefer to download a local copy.    In index.html, in the  head  section, add a reference to the Leaflet CSS file.  html link rel=\"stylesheet\" href=\"http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.css\"    In the  head  section, add a reference to the Mapzen CSS file.  html link rel=\"stylesheet\" href=\"https://unpkg.com/lrm-mapzen/dist/leaflet.routing.mapzen.css\"    In the  body  section, add the Leaflet JavaScript file.  html script src=\"http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.js\" /script    Add the Tangram JavaScript file, which is the rendering engine you will be using to draw the map.  html script src=\"https://mapzen.com/tangram/0.7.0/tangram.min.js\" /script    Add the Leaflet Routing Machine JavaScript file.  html script src=\"https://cdnjs.cloudflare.com/ajax/libs/leaflet-routing-machine/3.0.0/leaflet-routing-machine.min.js\" /script    Add the Mapzen JavaScript file.  html script src=\"https://unpkg.com/lrm-mapzen/dist/lrm-mapzen.js\" /script    Save your edits and refresh the browser.    After adding these, your index.html file should look something like this. Note that JavaScript can be inserted in either the  head  or the  body , but the  body  may improve loading of the page.  !DOCTYPE html  html  head \n   title My Routing Map /title \n   link rel= stylesheet  href= http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.css \n   link rel= stylesheet  href= https://unpkg.com/lrm-mapzen/dist/leaflet.routing.mapzen.css  /head  body \n   script src= http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.js /script \n   script src= https://mapzen.com/tangram/0.7.0/tangram.min.js /script \n   script src= https://cdnjs.cloudflare.com/ajax/libs/leaflet-routing-machine/3.0.0/leaflet-routing-machine.min.js /script \n   script src= https://unpkg.com/lrm-mapzen/dist/lrm-mapzen.js /script  /body  /html   At this point, your browser page is still empty. As you are working, it\u2019s a good idea to save your edits and periodically reload the browser page. This helps you identify problems quicker and trace them back to your most recent changes. You should also monitor the terminal window for status messages. If your code is working properly, you should see a message of 200 in the terminal window, as 200 is the HTTP response code for successful requests.  However, seeing a 404 error often means that the file cannot be found. You should make sure the paths in your HTML are correct before you continue further.", 
            "title": "Add references to CSS and JavaScript files"
        }, 
        {
            "location": "/add-routing-to-a-map/#add-a-map-to-the-page", 
            "text": "To display a Leaflet map on a page, you need a  div  element with an ID value, as well as a size for the box containing the map. Then, you can add the code to set the map and use Tangram to render it. If you want to know more about initializing a Leaflet map, see the  Leaflet getting started documentation .    At the bottom of the  head  section, add a  style  tag and the following size attributes to set the size of the map.  html style \n  #map {\n    height: 100%;\n    width: 100%;\n    position: absolute;\n  } /style    At the top of the  body  section, add the  div .  html div id=\"map\" /div    Immediately after the other  script  references, add the following JavaScript within a  script  tag to initialize Leaflet.  L.xxxxx  is a convention used with the Leaflet API. To make sure the scripts load in the proper order, this code must be placed after the dependencies.  html script \n  var map = L.map('map'); /script    Save your edits and refresh the browser. You should see a gray canvas with zoom controls and a Leaflet attribution in the bottom corner.     Your index.html should look something like this:  !DOCTYPE html  html  head \n   title My Routing Map /title \n   link rel= stylesheet  href= http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.css \n   link rel= stylesheet  href= https://unpkg.com/lrm-mapzen/dist/leaflet.routing.mapzen.css \n   style \n    #map {\n      height: 100%;\n      width: 100%;\n      position: absolute;\n    }\n   /style  /head  body \n   div id= map /div \n   script src= http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.js /script \n   script src= https://mapzen.com/tangram/0.7.0/tangram.min.js /script \n   script src= https://cdnjs.cloudflare.com/ajax/libs/leaflet-routing-machine/3.0.0/leaflet-routing-machine.min.js /script \n   script src= https://unpkg.com/lrm-mapzen/dist/lrm-mapzen.js /script \n   script \n    var map = L.map('map');\n   /script  /body  /html", 
            "title": "Add a map to the page"
        }, 
        {
            "location": "/add-routing-to-a-map/#add-a-tangram-map-to-the-frame", 
            "text": "At this point, you have enabled the basic Leaflet controls and have a canvas for your map, but still need to tell Leaflet to use Tangram to draw the contents of the map.  Tangram uses a scene file in .yaml format to specify the what it should draw and how the features should appear in the map. A basic scene file has a reference to a data source (in this case, OpenStreetMap data from Mapzen\u2019s  vector tile service  and the colors and types of features to draw. This scene file includes a demonstration API key for use with the vector tile service in this tutorial; if you want to put this map into production, you should obtain your own  API key .  In the code you will add, the  scene:  item sets the Tangram scene file to use for drawing and  attribution:  is what appears in the bottom corner of the map as the map attribution, overriding the default Leaflet attribution. This source code links to a scene file created by Mapzen, but you can modify the  scene:  parameter to point to a scene hosted at a different URL or a local file.  Note that Tangram and the vector tile service are not required for Mapzen Turn-by-Turn routing. If you prefer to use other data, refer to the  Leaflet documentation  to learn how reference tile layers in a map.    Inside the  script  tags, immediately after the  var map = L.map('map');  line, add the following code to use Tangram.  js\nvar layer = Tangram.leafletLayer({\n  scene: 'https://raw.githubusercontent.com/tangrams/cinnabar-style/gh-pages/cinnabar-style.yaml',\n  attribution: ' a href=\"https://mapzen.com/tangram\" target=\"_blank\" Tangram /a  |  a href=\"http://www.openstreetmap.org/about\" target=\"_blank\" copy; OSM contributors |  a href=\"https://mapzen.com/\" target=\"_blank\" Mapzen /a ',\n});\nlayer.addTo(map);    On the next line, immediately after  layer.addTo(map); , add a line to initialize the map display. This sets the extent of the map and the zoom level. The map is centered on Chicago, Illinois, with a zoom level that allows you to see the streets and features of the city. Zoom levels are similar to map scales or resolutions, where a smaller value shows a larger area in less detail, and a larger zoom level value depicts smaller area in great detail.  js\nmap.setView([41.8758,-87.6189], 16);    Save your edits and refresh the browser. You should see Leaflet map controls and an updated attribution, and the map should be centered at the location specified.     Your  body  section should look like this:  [...] body \n   div id= map /div \n   script src= http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.js /script \n   script src= https://mapzen.com/tangram/0.7.0/tangram.min.js /script \n   script src= https://cdnjs.cloudflare.com/ajax/libs/leaflet-routing-machine/3.0.0/leaflet-routing-machine.min.js /script \n   script src= https://unpkg.com/lrm-mapzen/dist/lrm-mapzen.js /script \n   script \n    var map = L.map('map');\n    var layer = Tangram.leafletLayer({\n      scene: 'https://raw.githubusercontent.com/tangrams/cinnabar-style/gh-pages/cinnabar-style.yaml',\n      attribution: ' a href= https://mapzen.com/tangram  target= _blank Tangram /a  |  a href= http://www.openstreetmap.org/about  target= _blank copy; OSM contributors |  a href= https://mapzen.com/  target= _blank Mapzen /a ',\n    });\n    layer.addTo(map);\n    map.setView([41.8758,-87.6189], 16);\n   /script  /body \n[...]  If your map is not loading properly, first check the terminal window for status messages and resolve any 404 errors. You can also copy the example source code at the end of the section in case you mistyped any of the steps. If your project worked until now, ensure that your browser has WebGL support enabled (although it is unusual for it to be turned off) or turn on the developer tools in your browser to see if you can debug further. If you are still having trouble, add an issue to the  documentation GitHub repository  so it can be investigated.", 
            "title": "Add a Tangram map to the frame"
        }, 
        {
            "location": "/add-routing-to-a-map/#add-waypoints-for-routing", 
            "text": "So far, you have referenced the necessary files, initialized Leaflet with a map container on the  page, and added Tangram to the map. Now, you are ready to add the routing code to your page using the Leaflet Routing Machine plug-in.  In the simplest implementation, your map will not provide the ability to search for places through geocoding or inputting coordinates otherwise. Therefore, you need to set the waypoints in your code. As you add functionality to your web page, you can set the initial coordinates through user interaction.    Add  //  at the beginning of the  map.setView([41.8758,-87.6189], 16)  line to comment out that code. You no longer need to set the extent manually like this because the routing environment will be specifying it.  js\n//map.setView([41.8758,-87.6189], 16);    Inside the  script  tag, and after the commented line, initialize routing with the following code. You can substitute your own coordinates for the start and end locations of the routing. These coordinates take you from Chicago, Illinois, to the entrance gates of the theme park in Anaheim, California.  js\nL.Routing.control({\n  waypoints: [\n    L.latLng(41.8758,-87.6189),\n    L.latLng(33.8128,-117.9259)\n  ]\n}).addTo(map);   This map shows the default route and driving directions from Leaflet Routing Machine, which uses Open Source Routing Machine (OSRM) as the underlying routing engine.    Your  body  section should look like this:  [...] body \n   div id= map /div \n   script src= http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.js /script \n   script src= https://mapzen.com/tangram/0.7.0/tangram.min.js /script \n   script src= https://cdnjs.cloudflare.com/ajax/libs/leaflet-routing-machine/3.0.0/leaflet-routing-machine.min.js /script \n   script src= https://unpkg.com/lrm-mapzen/dist/lrm-mapzen.js /script \n   script \n    var map = L.map('map');\n    var layer = Tangram.leafletLayer({\n      scene: 'https://raw.githubusercontent.com/tangrams/cinnabar-style/gh-pages/cinnabar-style.yaml',\n      attribution: ' a href= https://mapzen.com/tangram  target= _blank Tangram /a  |  a href= http://www.openstreetmap.org/about  target= _blank copy; OSM contributors |  a href= https://mapzen.com/  target= _blank Mapzen /a ',\n    });\n    layer.addTo(map);\n    //map.setView([41.8758,-87.6189], 16);\n    L.Routing.control({\n      waypoints: [\n        L.latLng(41.8758,-87.6189),\n        L.latLng(33.8128,-117.9259)\n      ]\n    }).addTo(map);\n   /script  /body \n[...]", 
            "title": "Add waypoints for routing"
        }, 
        {
            "location": "/add-routing-to-a-map/#set-mapzen-turn-by-turn-as-the-routing-engine", 
            "text": "By default, the Leaflet Routing Machine plug-in uses  Open Source Routing Machine (OSRM)  to perform the routing queries, so you need to substitute Mapzen Turn-by-Turn as the routing engine. To use a different engine, you need to set the  router:  to Mapzen and initialize a  formatter:  with functions for units and other conversions.    Replace the code within the  L.Routing.control  block with the following code to change the routing engine to Mapzen Turn-by-Turn. By including a  summaryTemplate , the directions can include totals of the length and expected time en route. Note that the  router:  has two items with placeholders; you will update these in the next steps.  js\n[...]\nL.Routing.control({\n  waypoints: [\n    L.latLng(41.8758,-87.6189),\n    L.latLng(33.8128,-117.9259)\n  ],\n  router: L.Routing.mapzen('mapzen-xxxxxx', {costing:'your-routing-mode'}),\n  formatter: new L.Routing.mapzenFormatter(),\n  summaryTemplate:' div class=\"start\" {name} /div div class=\"info {costing}\" {distance}, {time} /div ',\n  routeWhileDragging: false\n}).addTo(map);\n[...]    Go back to the https://mapzen.com/developers page and copy your API key to the clipboard.   Paste your own API key in place of  mapzen-xxxxxx  inside the single quotes. The routing will only load if you use a valid API key.   Change the options object for the transportation mode {costing: your-routing-mode } to {costing: auto } to perform routing by automobile, again maintaining the single quotes.  js\nrouter: L.Routing.mapzen('mapzen-xxxxxx', {costing:'auto'}),    Save your edits and refresh the browser. You should see a map, the route line, and updated icons and summary text in the narration box. The maneuver instructions are simpler and more concise.   This map shows the Mapzen Turn-by-Turn routing engine with simplified narration and driving instructions.    The  body  section should look something like this, but with your own API key for the  router :  [...] body \n   div id= map /div \n   script src= http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.js /script \n   script src= https://mapzen.com/tangram/0.7.0/tangram.min.js /script \n   script src= https://cdnjs.cloudflare.com/ajax/libs/leaflet-routing-machine/3.0.0/leaflet-routing-machine.min.js /script \n   script src= https://unpkg.com/lrm-mapzen/dist/lrm-mapzen.js /script \n   script \n    var map = L.map('map');\n    var layer = Tangram.leafletLayer({\n      scene: 'https://raw.githubusercontent.com/tangrams/cinnabar-style/gh-pages/cinnabar-style.yaml',\n      attribution: ' a href= https://mapzen.com/tangram  target= _blank Tangram /a  |  a href= http://www.openstreetmap.org/about  target= _blank copy; OSM contributors |  a href= https://mapzen.com/  target= _blank Mapzen /a ',\n    });\n    layer.addTo(map);\n    //map.setView([41.8758,-87.6189], 16);\n    L.Routing.control({\n      waypoints: [\n        L.latLng(41.8758,-87.6189),\n        L.latLng(33.8128,-117.9259)\n      ],\n      router: L.Routing.mapzen('mapzen-xxxxxx', {costing:'auto'}),\n      formatter: new L.Routing.mapzenFormatter(),\n      summaryTemplate:' div class= start {name} /div div class= info {costing} {distance}, {time} /div ',\n      routeWhileDragging: false\n    }).addTo(map);\n   /script  /body \n[...]  Mapzen Turn-by-Turn also provides the ability to specify additional waypoints through which your route should pass, such as visiting family in Kansas and Arizona and bobbing your head at Grand Canyon National Park. Currently, you can drag the start and end points (and add waypoints in between) to update the routing, but the route will not be recalculated until you drop the points. On your own, you can set the option for  routeWhileDragging  to  true  if you want to update the route while moving points on the map, although this can be slow and costly to make many queries. You can read more about the options available for  L.Routing.control  in the  Leaflet Routing Machine API documentation .", 
            "title": "Set Mapzen Turn-by-Turn as the routing engine"
        }, 
        {
            "location": "/add-routing-to-a-map/#change-the-route-line-color", 
            "text": "The symbols for the basemap are set in the scene file, but the route line may be hard to distinguish from the roads in your map. You can use  L.routing.control  to update the color of the route line.    After the closing line of the  waypoints:  block and immediately before the  router:  block, insert the following source code:  js\nlineOptions: {\n  styles: [ {color: 'white',opacity: 0.8, weight: 12},\n          {color: '#2676C6', opacity: 1, weight: 6}\n]},    Save your edits and refresh the browser. The line should change to blue and look thicker than before.     Click through the points in the directions list to pan and zoom the map to the location of each maneuver, including your destination.     The  body  section should look something like this, but with your own API key for the  router :  [...] body \n   div id= map /div \n   script src= http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.js /script \n   script src= https://mapzen.com/tangram/0.7.0/tangram.min.js /script \n   script src= https://cdnjs.cloudflare.com/ajax/libs/leaflet-routing-machine/3.0.0/leaflet-routing-machine.min.js /script \n   script src= https://unpkg.com/lrm-mapzen/dist/lrm-mapzen.js /script \n   script \n    var map = L.map('map');\n    var layer = Tangram.leafletLayer({\n      scene: 'https://raw.githubusercontent.com/tangrams/cinnabar-style/gh-pages/cinnabar-style.yaml',\n      attribution: ' a href= https://mapzen.com/tangram  target= _blank Tangram /a  |  a href= http://www.openstreetmap.org/about  target= _blank copy; OSM contributors |  a href= https://mapzen.com/  target= _blank Mapzen /a ',\n    });\n    layer.addTo(map);\n    //map.setView([41.8758,-87.6189], 16);\n    L.Routing.control({\n      waypoints: [\n        L.latLng(41.8758,-87.6189),\n        L.latLng(33.8128,-117.9259)\n      ],\n      lineOptions: {\n        styles: [ {color: 'white',opacity: 0.8, weight: 12},\n                {color: '#2676C6', opacity: 1, weight: 6}\n      ]},\n      router: L.Routing.mapzen('mapzen-xxxxxx', {costing:'auto'}),\n      formatter: new L.Routing.mapzenFormatter(),\n      summaryTemplate:' div class= start {name} /div div class= info {costing} {distance}, {time} /div ',\n      routeWhileDragging: false\n    }).addTo(map);\n   /script  /body \n[...]", 
            "title": "Change the route line color"
        }, 
        {
            "location": "/add-routing-to-a-map/#walkthrough-summary-and-next-steps", 
            "text": "In this walkthrough, you learned the basics of making a map with Mapzen Turn-by-Turn routing. You can now take what you have learned and add more functionality to your map and embed it in your own projects. For example, you may want to add code to allow the user to pick routing locations with a button, change the costing mode used for routing, or set other options. Each of the routing modes Mapzen Turn-by-Turn supports has many options that can be used to influence the output route and estimated time. For example, automobile routing allows you to set penalties and costs to avoid toll roads or crossing international borders, and bicycle routing allows you to specify the category of bicycle so you are routed on appropriate paths for your equipment.  You can review the  documentation  to learn more about routing with Mapzen Turn-by-Turn.", 
            "title": "Walkthrough summary and next steps"
        }, 
        {
            "location": "/decoding/", 
            "text": "Decode a route shape\n\n\nMapzen Turn-by-Turn uses the Google Maps encoded polyline format to store a series of latitude, longitude coordinates as a single string. Polyline encoding greatly reduces the size of the route response, especially for longer routes. A description is found here: \npolyline encoding\n.\n\n\nNote that Mapzen Turn-by-Turn uses six digits of decimal precision, rather than five as referenced in the Google algorithms documentation.\n\n\nBelow are some sample algorithms to decode the string to create a list of latitude,longitude coordinates.\n\n\nJavaScript\n\n\nHere is an example of decoding in JavaScript.\n\n\n// This is adapted from the implementation in Project-OSRM\n// https://github.com/DennisOSRM/Project-OSRM-Web/blob/master/WebContent/routing/OSRM.RoutingGeometry.js\npolyline.decode = function(str, precision) {\n    var index = 0,\n        lat = 0,\n        lng = 0,\n        coordinates = [],\n        shift = 0,\n        result = 0,\n        byte = null,\n        latitude_change,\n        longitude_change,\n        factor = Math.pow(10, precision || 6);\n\n    // Coordinates have variable length when encoded, so just keep\n    // track of whether we've hit the end of the string. In each\n    // loop iteration, a single coordinate is decoded.\n    while (index \n str.length) {\n\n        // Reset shift, result, and byte\n        byte = null;\n        shift = 0;\n        result = 0;\n\n        do {\n            byte = str.charCodeAt(index++) - 63;\n            result |= (byte \n 0x1f) \n shift;\n            shift += 5;\n        } while (byte \n= 0x20);\n\n        latitude_change = ((result \n 1) ? ~(result \n 1) : (result \n 1));\n\n        shift = result = 0;\n\n        do {\n            byte = str.charCodeAt(index++) - 63;\n            result |= (byte \n 0x1f) \n shift;\n            shift += 5;\n        } while (byte \n= 0x20);\n\n        longitude_change = ((result \n 1) ? ~(result \n 1) : (result \n 1));\n\n        lat += latitude_change;\n        lng += longitude_change;\n\n        coordinates.push([lat / factor, lng / factor]);\n    }\n\n    return coordinates;\n};\n\n\n\n\n\nC++ 11\n\n\nHere is an example of decoding in C++11\n\n\n#include \nvector\n\n\nconstexpr double kPolylinePrecision = 1E6;\nconstexpr double kInvPolylinePrecision = 1.0 / kPolylinePrecision;\n\nstruct PointLL {\n  float lat;\n  float lon;\n};\n\nstd::vector\nPointLL\n decode(const std::string\n encoded) {\n  size_t i = 0;     // what byte are we looking at\n\n  // Handy lambda to turn a few bytes of an encoded string into an integer\n  auto deserialize = [\nencoded, \ni](const int previous) {\n    // Grab each 5 bits and mask it in where it belongs using the shift\n    int byte, shift = 0, result = 0;\n    do {\n      byte = static_cast\nint\n(encoded[i++]) - 63;\n      result |= (byte \n 0x1f) \n shift;\n      shift += 5;\n    } while (byte \n= 0x20);\n    // Undo the left shift from above or the bit flipping and add to previous\n    // since its an offset\n    return previous + (result \n 1 ? ~(result \n 1) : (result \n 1));\n  };\n\n  // Iterate over all characters in the encoded string\n  std::vector\nPointLL\n shape;\n  int last_lon = 0, last_lat = 0;\n  while (i \n encoded.length()) {\n    // Decode the coordinates, lat first for some reason\n    int lat = deserialize(last_lat);\n    int lon = deserialize(last_lon);\n\n    // Shift the decimal point 5 places to the left\n    shape.emplace_back(static_cast\nfloat\n(static_cast\ndouble\n(lat) *\n                                          kInvPolylinePrecision),\n                       static_cast\nfloat\n(static_cast\ndouble\n(lon) *\n                                          kInvPolylinePrecision));\n\n    // Remember the last one we encountered\n    last_lon = lon;\n    last_lat = lat;\n  }\n  return shape;\n}\n\n\n\n\nPython\n\n\nHere is an example of decoding in Python\n\n\n#!/usr/bin/env python\n\nimport sys\n\n#six degrees of precision in valhalla\ninv = 1.0 / 1e6;\n\n#decode an encoded string\ndef decode(encoded):\n  decoded = []\n  previous = [0,0]\n  i = 0\n  #for each byte\n  while i \n len(encoded):\n    #for each coord (lat, lon)\n    ll = [0,0]\n    for j in [0, 1]:\n      shift = 0\n      byte = 0x20\n      #keep decoding bytes until you have this coord\n      while byte \n= 0x20:\n        byte = ord(encoded[i]) - 63\n        i += 1\n        ll[j] |= (byte \n 0x1f) \n shift\n        shift += 5\n      #get the final value adding the previous offset and remember it for the next\n      ll[j] = previous[j] + (~(ll[j] \n 1) if ll[j] \n 1 else (ll[j] \n 1))\n      previous[j] = ll[j]\n    #scale by the precision and chop off long coords also flip the positions so\n    #its the far more standard lon,lat instead of lat,lon\n    decoded.append([float('%.6f' % (ll[1] * inv)), float('%.6f' % (ll[0] * inv))])\n  #hand back the list of coordinates\n  return decoded\n\nprint decode(sys.argv[1])", 
            "title": "Decoding"
        }, 
        {
            "location": "/decoding/#decode-a-route-shape", 
            "text": "Mapzen Turn-by-Turn uses the Google Maps encoded polyline format to store a series of latitude, longitude coordinates as a single string. Polyline encoding greatly reduces the size of the route response, especially for longer routes. A description is found here:  polyline encoding .  Note that Mapzen Turn-by-Turn uses six digits of decimal precision, rather than five as referenced in the Google algorithms documentation.  Below are some sample algorithms to decode the string to create a list of latitude,longitude coordinates.", 
            "title": "Decode a route shape"
        }, 
        {
            "location": "/decoding/#javascript", 
            "text": "Here is an example of decoding in JavaScript.  // This is adapted from the implementation in Project-OSRM\n// https://github.com/DennisOSRM/Project-OSRM-Web/blob/master/WebContent/routing/OSRM.RoutingGeometry.js\npolyline.decode = function(str, precision) {\n    var index = 0,\n        lat = 0,\n        lng = 0,\n        coordinates = [],\n        shift = 0,\n        result = 0,\n        byte = null,\n        latitude_change,\n        longitude_change,\n        factor = Math.pow(10, precision || 6);\n\n    // Coordinates have variable length when encoded, so just keep\n    // track of whether we've hit the end of the string. In each\n    // loop iteration, a single coordinate is decoded.\n    while (index   str.length) {\n\n        // Reset shift, result, and byte\n        byte = null;\n        shift = 0;\n        result = 0;\n\n        do {\n            byte = str.charCodeAt(index++) - 63;\n            result |= (byte   0x1f)   shift;\n            shift += 5;\n        } while (byte  = 0x20);\n\n        latitude_change = ((result   1) ? ~(result   1) : (result   1));\n\n        shift = result = 0;\n\n        do {\n            byte = str.charCodeAt(index++) - 63;\n            result |= (byte   0x1f)   shift;\n            shift += 5;\n        } while (byte  = 0x20);\n\n        longitude_change = ((result   1) ? ~(result   1) : (result   1));\n\n        lat += latitude_change;\n        lng += longitude_change;\n\n        coordinates.push([lat / factor, lng / factor]);\n    }\n\n    return coordinates;\n};", 
            "title": "JavaScript"
        }, 
        {
            "location": "/decoding/#c-11", 
            "text": "Here is an example of decoding in C++11  #include  vector \n\nconstexpr double kPolylinePrecision = 1E6;\nconstexpr double kInvPolylinePrecision = 1.0 / kPolylinePrecision;\n\nstruct PointLL {\n  float lat;\n  float lon;\n};\n\nstd::vector PointLL  decode(const std::string  encoded) {\n  size_t i = 0;     // what byte are we looking at\n\n  // Handy lambda to turn a few bytes of an encoded string into an integer\n  auto deserialize = [ encoded,  i](const int previous) {\n    // Grab each 5 bits and mask it in where it belongs using the shift\n    int byte, shift = 0, result = 0;\n    do {\n      byte = static_cast int (encoded[i++]) - 63;\n      result |= (byte   0x1f)   shift;\n      shift += 5;\n    } while (byte  = 0x20);\n    // Undo the left shift from above or the bit flipping and add to previous\n    // since its an offset\n    return previous + (result   1 ? ~(result   1) : (result   1));\n  };\n\n  // Iterate over all characters in the encoded string\n  std::vector PointLL  shape;\n  int last_lon = 0, last_lat = 0;\n  while (i   encoded.length()) {\n    // Decode the coordinates, lat first for some reason\n    int lat = deserialize(last_lat);\n    int lon = deserialize(last_lon);\n\n    // Shift the decimal point 5 places to the left\n    shape.emplace_back(static_cast float (static_cast double (lat) *\n                                          kInvPolylinePrecision),\n                       static_cast float (static_cast double (lon) *\n                                          kInvPolylinePrecision));\n\n    // Remember the last one we encountered\n    last_lon = lon;\n    last_lat = lat;\n  }\n  return shape;\n}", 
            "title": "C++ 11"
        }, 
        {
            "location": "/decoding/#python", 
            "text": "Here is an example of decoding in Python  #!/usr/bin/env python\n\nimport sys\n\n#six degrees of precision in valhalla\ninv = 1.0 / 1e6;\n\n#decode an encoded string\ndef decode(encoded):\n  decoded = []\n  previous = [0,0]\n  i = 0\n  #for each byte\n  while i   len(encoded):\n    #for each coord (lat, lon)\n    ll = [0,0]\n    for j in [0, 1]:\n      shift = 0\n      byte = 0x20\n      #keep decoding bytes until you have this coord\n      while byte  = 0x20:\n        byte = ord(encoded[i]) - 63\n        i += 1\n        ll[j] |= (byte   0x1f)   shift\n        shift += 5\n      #get the final value adding the previous offset and remember it for the next\n      ll[j] = previous[j] + (~(ll[j]   1) if ll[j]   1 else (ll[j]   1))\n      previous[j] = ll[j]\n    #scale by the precision and chop off long coords also flip the positions so\n    #its the far more standard lon,lat instead of lat,lon\n    decoded.append([float('%.6f' % (ll[1] * inv)), float('%.6f' % (ll[0] * inv))])\n  #hand back the list of coordinates\n  return decoded\n\nprint decode(sys.argv[1])", 
            "title": "Python"
        }
    ]
}